CONSTTK const
INTTK int
IDENFR A
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR B
ASSIGN =
INTCON 2
COMMA ,
IDENFR C
ASSIGN =
INTCON 3
COMMA ,
IDENFR D
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR n
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR m
ASSIGN =
INTCON 20
COMMA ,
IDENFR p
ASSIGN =
INTCON 99
COMMA ,
IDENFR q
ASSIGN =
INTCON 66
SEMICN ;
VOIDTK void
IDENFR f0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR f1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR x
LSS <
INTCON 0
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
MINU -
IDENFR x
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR x
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
MINU -
IDENFR x
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR x
EQL ==
INTCON 0
RPARENT )
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR x
NEQ !=
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
WHILETK while
LPARENT (
NOT !
INTCON 1
RPARENT )
LBRACE {
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR f2
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
COMMA ,
INTTK int
IDENFR z
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR x
PLUS +
IDENFR n
MULT *
IDENFR B
MINU -
IDENFR m
DIV /
IDENFR C
PLUS +
IDENFR z
MOD %
LPARENT (
IDENFR A
PLUS +
IDENFR B
RPARENT )
PLUS +
INTCON 233
PLUS +
MINU -
IDENFR y
PLUS +
IDENFR f1
LPARENT (
IDENFR y
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MULT *
PLUS +
IDENFR A
SEMICN ;
RETURNTK return
IDENFR x
PLUS +
IDENFR y
PLUS +
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR gi
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR r
SEMICN ;
IDENFR r
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Got a number: "
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d!\n"
COMMA ,
IDENFR r
RPARENT )
SEMICN ;
RETURNTK return
IDENFR r
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373348\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR f2
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
IDENFR gi
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
IDENFR f0
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f1
LPARENT (
IDENFR gi
LPARENT (
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR f2
LPARENT (
IDENFR a
COMMA ,
IDENFR A
COMMA ,
IDENFR gi
LPARENT (
RPARENT )
RPARENT )
COMMA ,
IDENFR c
COMMA ,
IDENFR d
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IDENFR c
ASSIGN =
IDENFR f2
LPARENT (
IDENFR b
COMMA ,
IDENFR n
COMMA ,
IDENFR gi
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR f2
LPARENT (
IDENFR c
COMMA ,
IDENFR gi
LPARENT (
RPARENT )
COMMA ,
IDENFR q
RPARENT )
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
RETURNTK return
IDENFR d
SEMICN ;
RBRACE }
