CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 123
COMMA ,
IDENFR b
ASSIGN =
MINU -
INTCON 234
COMMA ,
IDENFR c
ASSIGN =
INTCON 123
MINU -
INTCON 234
SEMICN ;
CONSTTK const
INTTK int
IDENFR x
ASSIGN =
INTCON 346
COMMA ,
IDENFR y
ASSIGN =
MINU -
INTCON 13467
COMMA ,
IDENFR z
ASSIGN =
INTCON 12
MULT *
INTCON 12
MULT *
INTCON 153
SEMICN ;
INTTK int
IDENFR test_return2
LPARENT (
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
RETURNTK return
INTCON 12
SEMICN ;
RBRACE }
INTTK int
IDENFR test_return1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
PLUS +
INTCON 2
MULT *
INTCON 3
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR test_exp
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR aaa
ASSIGN =
INTCON 1
COMMA ,
IDENFR bbb
ASSIGN =
INTCON 2
COMMA ,
IDENFR ccc
ASSIGN =
MINU -
INTCON 123
SEMICN ;
INTTK int
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR m
ASSIGN =
MINU -
LPARENT (
PLUS +
LPARENT (
MINU -
LPARENT (
MINU -
LPARENT (
MINU -
INTCON 123
MOD %
INTCON 24
RPARENT )
MULT *
INTCON 9
RPARENT )
DIV /
INTCON 2
RPARENT )
MULT *
INTCON 84
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
MULT *
LPARENT (
IDENFR c
RPARENT )
PLUS +
LPARENT (
INTCON 1024
PLUS +
IDENFR x
MINU -
IDENFR z
PLUS +
IDENFR y
RPARENT )
RPARENT )
MOD %
INTCON 1024
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n = %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
LPARENT (
LPARENT (
INTCON 1024
MULT *
IDENFR a
RPARENT )
DIV /
PLUS +
IDENFR c
MULT *
IDENFR test_return1
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n = %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
LPARENT (
INTCON 1234
RPARENT )
MOD %
IDENFR test_return2
LPARENT (
INTCON 12
DIV /
INTCON 2
MULT *
IDENFR bbb
COMMA ,
INTCON 13
MULT *
INTCON 2
MINU -
INTCON 6
DIV /
INTCON 3
PLUS +
INTCON 5
MOD %
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n = %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
PLUS +
LPARENT (
MINU -
IDENFR a
PLUS +
MINU -
IDENFR b
MULT *
PLUS +
IDENFR c
RPARENT )
MOD %
LPARENT (
LPARENT (
MINU -
INTCON 23
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n = %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
PLUS +
MINU -
INTCON 123
MULT *
LPARENT (
MINU -
IDENFR test_return1
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n = %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
PLUS +
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n = %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
LPARENT (
INTCON 22
PLUS +
INTCON 23
MINU -
INTCON 24
MULT *
INTCON 23
DIV /
PLUS +
INTCON 4
RPARENT )
MOD %
INTCON 24
SEMICN ;
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_constExp
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR n
ASSIGN =
INTCON 324
COMMA ,
IDENFR m
ASSIGN =
INTCON 62445
SEMICN ;
CONSTTK const
INTTK int
IDENFR p
ASSIGN =
PLUS +
LPARENT (
IDENFR x
PLUS +
IDENFR a
PLUS +
MINU -
IDENFR n
RPARENT )
MULT *
INTCON 39
SEMICN ;
CONSTTK const
INTTK int
IDENFR q
ASSIGN =
MINU -
LPARENT (
PLUS +
LPARENT (
MINU -
LPARENT (
IDENFR a
RPARENT )
MULT *
IDENFR b
RPARENT )
MOD %
INTCON 49
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
LPARENT (
INTCON 123
PLUS +
LPARENT (
IDENFR a
RPARENT )
MINU -
MINU -
IDENFR m
DIV /
MINU -
INTCON 23
RPARENT )
MOD %
INTCON 12
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_if
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 123
SEMICN ;
INTTK int
IDENFR bb
ASSIGN =
INTCON 0
COMMA ,
IDENFR cc
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 100
RPARENT )
LBRACE {
IDENFR bb
ASSIGN =
MINU -
INTCON 123
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR edf_edf
SEMICN ;
IDENFR edf_edf
ASSIGN =
IDENFR test_return1
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR bb
GRE >
INTCON 0
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR bb
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR cc
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR cc
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR cc
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR abc_abc
ASSIGN =
INTCON 123456
SEMICN ;
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test_if done!\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_while
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR j
LEQ <=
INTCON 0
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
INTCON 10
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 10
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "test_while done!\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR test_if_while
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR ret
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
MULT *
IDENFR j
GRE >
INTCON 50
RPARENT )
IDENFR ret
ASSIGN =
IDENFR i
MULT *
IDENFR j
SEMICN ;
ELSETK else
IDENFR ret
ASSIGN =
IDENFR ret
PLUS +
IDENFR i
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR ret
GRE >
INTCON 0
RPARENT )
LBRACE {
WHILETK while
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
WHILETK while
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ret
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_break_continue
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 20
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 20
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
BREAKTK break
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 20
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 20
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "test_break_continue done!\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x_x
SEMICN ;
IDENFR x_x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373755\n"
RPARENT )
SEMICN ;
IDENFR test_exp
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_if
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_while
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_if_while
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_break_continue
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
