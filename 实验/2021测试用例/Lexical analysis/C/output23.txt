INTTK int
IDENFR a
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
PLUS +
INTCON 0
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
INTCON 3
PLUS +
INTCON 0
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 4
SEMICN ;
VOIDTK void
IDENFR shayemeiyou
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
SEMICN ;
RBRACE }
INTTK int
IDENFR yi
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR pidoubushi
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR mult
LPARENT (
INTTK int
IDENFR g
COMMA ,
INTTK int
IDENFR k
RPARENT )
LBRACE {
RETURNTK return
IDENFR g
MULT *
IDENFR k
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR m
SEMICN ;
INTTK int
IDENFR s
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373044\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "s+1=%d\n"
COMMA ,
IDENFR s
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "m=%d\n"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR m
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
IDENFR m
PLUS +
IDENFR yi
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "m=%d\n"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR m
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
IDENFR m
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "m=%d\n"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR m
NEQ !=
INTCON 3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "m=%d\n"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
MINU -
PLUS +
MINU -
LPARENT (
LPARENT (
IDENFR mult
LPARENT (
IDENFR m
COMMA ,
INTCON 1
RPARENT )
DIV /
INTCON 1
PLUS +
INTCON 1
RPARENT )
MOD %
INTCON 4
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR mult
LPARENT (
IDENFR m
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "m=%d\n"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR m
GRE >
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR m
LEQ <=
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "before break\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR m
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
