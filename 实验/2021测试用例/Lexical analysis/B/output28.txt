CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
MINU -
INTCON 2
COMMA ,
IDENFR c
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 1234567
SEMICN ;
CONSTTK const
INTTK int
IDENFR e
ASSIGN =
INTCON 123456
COMMA ,
IDENFR f
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 2
PLUS +
INTCON 3
RPARENT )
COMMA ,
IDENFR g
ASSIGN =
INTCON 40
PLUS +
INTCON 15
SEMICN ;
CONSTTK const
INTTK int
IDENFR h
ASSIGN =
LPARENT (
INTCON 12
PLUS +
INTCON 12
RPARENT )
MULT *
INTCON 6
PLUS +
INTCON 0
COMMA ,
IDENFR x
ASSIGN =
LPARENT (
INTCON 1
PLUS +
LPARENT (
MINU -
INTCON 2
RPARENT )
RPARENT )
MULT *
INTCON 0
MULT *
LPARENT (
INTCON 0
PLUS +
INTCON 1
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR __ab1cdefg__123
ASSIGN =
MINU -
INTCON 123
SEMICN ;
CONSTTK const
INTTK int
IDENFR abc_0_defg
ASSIGN =
LPARENT (
INTCON 30
PLUS +
INTCON 50
RPARENT )
DIV /
INTCON 4
SEMICN ;
CONSTTK const
INTTK int
IDENFR y
ASSIGN =
MINU -
INTCON 40
DIV /
MINU -
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR z
ASSIGN =
LPARENT (
PLUS +
INTCON 11
RPARENT )
MOD %
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR array1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
COMMA ,
IDENFR array2
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 10
COMMA ,
INTCON 11
COMMA ,
INTCON 12
COMMA ,
INTCON 13
COMMA ,
MINU -
INTCON 14
COMMA ,
MINU -
INTCON 15
COMMA ,
MINU -
INTCON 16
COMMA ,
INTCON 17
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR array3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 6
DIV /
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
MINU -
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 10
DIV /
INTCON 5
COMMA ,
INTCON 6
MOD %
INTCON 4
PLUS +
INTCON 5
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR array4
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR array5
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
MINU -
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
INTTK int
IDENFR aaa
COMMA ,
IDENFR bbb
COMMA ,
IDENFR ccc
SEMICN ;
INTTK int
IDENFR xx
COMMA ,
IDENFR aaaa
ASSIGN =
INTCON 123
COMMA ,
IDENFR bbbb
ASSIGN =
MINU -
INTCON 123
COMMA ,
IDENFR cccc
ASSIGN =
PLUS +
INTCON 0
SEMICN ;
INTTK int
IDENFR compare
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR a
SEMICN ;
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 12
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 10
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR d
LBRACK [
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_exp
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
MULT *
INTCON 15
COMMA ,
INTCON 2
MINU -
IDENFR array2
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
INTCON 3
COMMA ,
IDENFR array1
LBRACK [
INTCON 3
RBRACK ]
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
IDENFR array3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
INTCON 3
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
PLUS +
LPARENT (
MINU -
LPARENT (
PLUS +
LPARENT (
MINU -
LPARENT (
PLUS +
IDENFR array1
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
MULT *
INTCON 122
RPARENT )
MULT *
INTCON 12
RPARENT )
MOD %
INTCON 10
RPARENT )
SEMICN ;
IDENFR a
LBRACK [
IDENFR array1
LBRACK [
IDENFR array2
LBRACK [
INTCON 9
RBRACK ]
RBRACK ]
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
LBRACK [
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RBRACK ]
LBRACK [
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RBRACK ]
ASSIGN =
IDENFR array2
LBRACK [
INTCON 5
RBRACK ]
MULT *
INTCON 5
SEMICN ;
INTTK int
IDENFR xxx
ASSIGN =
IDENFR func1
LPARENT (
IDENFR a
RPARENT )
MULT *
INTCON 234
DIV /
INTCON 45
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_params3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_params2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_getint
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n1
COMMA ,
IDENFR n2
COMMA ,
IDENFR n3
SEMICN ;
IDENFR n1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR n2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR n3
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_printf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n1
ASSIGN =
INTCON 100
COMMA ,
IDENFR n2
ASSIGN =
MINU -
INTCON 25
COMMA ,
IDENFR n3
ASSIGN =
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n1 = %d\n"
COMMA ,
IDENFR n1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n2-5 = %d\n"
COMMA ,
IDENFR n2
MINU -
INTCON 5
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n2 + n3 = %d\n"
COMMA ,
IDENFR n2
PLUS +
IDENFR n3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "n2 * n3 = %d\n"
COMMA ,
IDENFR n2
MULT *
IDENFR n3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "! ()*+,-./0123456789:;\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "<=>?@\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "ABCDEFGHIJKLMNOPQRSTUVWXYZ\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "[]^_`\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "abcdefghijklmnopqrstuvwxyz{|}~\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR test_return
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 2
SEMICN ;
RBRACE }
INTTK int
IDENFR test_params1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
MULT *
IDENFR c
MULT *
IDENFR a
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR test_getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373755\n"
RPARENT )
SEMICN ;
IDENFR test_printf
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_return
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_params1
LPARENT (
IDENFR a
COMMA ,
IDENFR d
COMMA ,
IDENFR f
RPARENT )
SEMICN ;
IDENFR test_params2
LPARENT (
IDENFR array3
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR array3
RPARENT )
SEMICN ;
IDENFR test_params3
LPARENT (
INTCON 123
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
