CONSTTK const
INTTK int
IDENFR normalConst1
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR normalConst2
ASSIGN =
INTCON 12
COMMA ,
IDENFR normalConst3
ASSIGN =
INTCON 13
SEMICN ;
CONSTTK const
INTTK int
IDENFR array1DConst1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR array2DConst1
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 5
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 7
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR normalVar1
ASSIGN =
INTCON 21
SEMICN ;
INTTK int
IDENFR normalVar2
ASSIGN =
INTCON 22
COMMA ,
IDENFR normalVar3
ASSIGN =
INTCON 23
SEMICN ;
INTTK int
IDENFR array1DVar1
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
INTTK int
IDENFR array2DVar1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR sum
SEMICN ;
VOIDTK void
IDENFR outputInt
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR getArraySum
LPARENT (
INTTK int
IDENFR num
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR size
RPARENT )
LBRACE {
INTTK int
IDENFR temp
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR temp
LSS <
IDENFR size
RPARENT )
LBRACE {
IDENFR ans
ASSIGN =
IDENFR ans
PLUS +
IDENFR num
LBRACK [
IDENFR temp
RBRACK ]
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR temp
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
VOIDTK void
IDENFR judgeEvenOdd
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d is even!\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d is odd!\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR judgeArrayAllEven
LPARENT (
INTTK int
IDENFR para3
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR row
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR flag
ASSIGN =
INTCON 0
COMMA ,
IDENFR temp
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR row
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR para3
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR temp
ASSIGN =
IDENFR para3
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR flag
EQL ==
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR flag
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "All even!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Contains odd! %d\n"
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR cntEvenNum
LPARENT (
INTTK int
IDENFR para1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR size
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR cnt
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR size
MINU -
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR para1
LBRACK [
IDENFR i
RBRACK ]
MOD %
INTCON 2
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "array contains %d even number!\n"
COMMA ,
IDENFR cnt
RPARENT )
SEMICN ;
RETURNTK return
IDENFR cnt
SEMICN ;
RBRACE }
INTTK int
IDENFR get2Max
LPARENT (
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR ans
ASSIGN =
IDENFR m
SEMICN ;
IFTK if
LPARENT (
IDENFR m
GRE >
IDENFR n
RPARENT )
LBRACE {
IDENFR ans
ASSIGN =
IDENFR m
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR ans
ASSIGN =
IDENFR n
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
IDENFR get2Min
LPARENT (
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR ans
ASSIGN =
IDENFR m
SEMICN ;
IFTK if
LPARENT (
IDENFR m
GEQ >=
IDENFR n
RPARENT )
LBRACE {
IDENFR ans
ASSIGN =
IDENFR n
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR ans
ASSIGN =
IDENFR m
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373341\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR mm
SEMICN ;
IDENFR mm
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR nn
SEMICN ;
IDENFR nn
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR max
SEMICN ;
IDENFR max
ASSIGN =
IDENFR get2Max
LPARENT (
IDENFR mm
COMMA ,
IDENFR nn
RPARENT )
SEMICN ;
INTTK int
IDENFR min
SEMICN ;
IDENFR min
ASSIGN =
IDENFR get2Min
LPARENT (
IDENFR mm
COMMA ,
IDENFR nn
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 4
RPARENT )
LBRACE {
IDENFR array1DVar1
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
MULT *
IDENFR i
DIV /
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR m
SEMICN ;
IDENFR m
ASSIGN =
IDENFR getArraySum
LPARENT (
IDENFR array1DVar1
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "m = %d, n = %d, mm = %d, nn = %d\n"
COMMA ,
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR mm
COMMA ,
IDENFR nn
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "max of mm and nn: %d; min of mm and nn: %d\n"
COMMA ,
IDENFR max
COMMA ,
IDENFR min
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR mainConst1
ASSIGN =
INTCON 10
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "mainConst1 = %d\n"
COMMA ,
IDENFR mainConst1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Sum of normalConst: %d\n"
COMMA ,
IDENFR normalConst1
PLUS +
IDENFR normalConst2
PLUS +
IDENFR normalConst3
RPARENT )
SEMICN ;
IDENFR judgeEvenOdd
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Sum of array: %d\n"
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR array2DVar1
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 10
MULT *
IDENFR i
MINU -
IDENFR j
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR array2DVar1
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "sum of array: %d\n"
COMMA ,
IDENFR sum
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR array2DVar1
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 4
MULT *
IDENFR i
MULT *
IDENFR j
DIV /
INTCON 2
PLUS +
INTCON 4
MINU -
INTCON 2
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR cntEvenNum
LPARENT (
IDENFR array1DVar1
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
IDENFR judgeArrayAllEven
LPARENT (
IDENFR array2DVar1
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
IDENFR judgeEvenOdd
LPARENT (
IDENFR array2DVar1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
