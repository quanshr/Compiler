INTTK int
IDENFR count
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR climbStairs
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
LSS <
INTCON 0
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 0
RPARENT )
RETURNTK return
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 1
RPARENT )
RETURNTK return
INTCON 1
SEMICN ;
RETURNTK return
IDENFR climbStairs
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
PLUS +
IDENFR climbStairs
LPARENT (
IDENFR n
MINU -
INTCON 2
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR sum
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR return1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
IDENFR sum
LPARENT (
INTCON 2
COMMA ,
INTCON 3
RPARENT )
PLUS +
IDENFR sum
LPARENT (
INTCON 4
COMMA ,
INTCON 5
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR return2
LPARENT (
RPARENT )
LBRACE {
IDENFR count
ASSIGN =
IDENFR count
PLUS +
INTCON 3
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR SPAS
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR product
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR digit
SEMICN ;
WHILETK while
LPARENT (
IDENFR n
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR digit
ASSIGN =
IDENFR n
MOD %
INTCON 10
SEMICN ;
IDENFR n
ASSIGN =
IDENFR n
DIV /
INTCON 10
SEMICN ;
IDENFR product
ASSIGN =
IDENFR product
MULT *
IDENFR digit
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR digit
SEMICN ;
RBRACE }
RETURNTK return
IDENFR product
MINU -
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR NOS
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
INTTK int
IDENFR step
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR num
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR step
ASSIGN =
IDENFR step
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR num
MOD %
INTCON 2
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR num
ASSIGN =
IDENFR num
MINU -
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR num
MOD %
INTCON 2
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IDENFR num
ASSIGN =
IDENFR num
DIV /
INTCON 2
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
IDENFR step
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19231047\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "climb 0 : %d\n"
COMMA ,
IDENFR climbStairs
LPARENT (
IDENFR count
RPARENT )
RPARENT )
SEMICN ;
IDENFR return2
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "climb %d : %d\n"
COMMA ,
IDENFR count
COMMA ,
IDENFR climbStairs
LPARENT (
IDENFR count
RPARENT )
RPARENT )
SEMICN ;
IDENFR return2
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "climb %d : %d\n"
COMMA ,
IDENFR count
COMMA ,
IDENFR climbStairs
LPARENT (
IDENFR count
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
IDENFR return1
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test return1 : %d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test climb sum %d : %d\n"
COMMA ,
IDENFR sum
LPARENT (
INTCON 3
COMMA ,
INTCON 4
RPARENT )
COMMA ,
IDENFR climbStairs
LPARENT (
IDENFR sum
LPARENT (
INTCON 3
COMMA ,
INTCON 4
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test product - sum : %d\n"
COMMA ,
IDENFR SPAS
LPARENT (
INTCON 1345121324
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test nest 1 : %d\n"
COMMA ,
IDENFR climbStairs
LPARENT (
IDENFR sum
LPARENT (
IDENFR SPAS
LPARENT (
INTCON 34
RPARENT )
COMMA ,
IDENFR SPAS
LPARENT (
INTCON 32
RPARENT )
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test nest 2 : %d\n"
COMMA ,
IDENFR climbStairs
LPARENT (
IDENFR sum
LPARENT (
IDENFR NOS
LPARENT (
INTCON 14
RPARENT )
COMMA ,
IDENFR NOS
LPARENT (
INTCON 6
RPARENT )
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test file"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
