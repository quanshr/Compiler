CONSTTK const
INTTK int
IDENFR notuse
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR notuse2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR n
ASSIGN =
INTCON 2
COMMA ,
IDENFR k
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 9
RBRACE }
COMMA ,
LBRACE {
INTCON 10
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 11
COMMA ,
INTCON 12
RBRACE }
RBRACE }
COMMA ,
IDENFR des
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR des2
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR m
SEMICN ;
VOIDTK void
IDENFR matrixMul
LPARENT (
INTTK int
IDENFR a1
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR a2
LBRACK [
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
INTTK int
IDENFR op
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR l
ASSIGN =
INTCON 0
COMMA ,
IDENFR tmp
SEMICN ;
WHILETK while
LPARENT (
IDENFR m
GRE >
IDENFR i
RPARENT )
LBRACE {
IDENFR l
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
GRE >
IDENFR l
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR n
GRE >
IDENFR j
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
IDENFR a1
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
MULT *
IDENFR a2
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
IDENFR l
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR op
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR des
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR l
RBRACK ]
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR des2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR l
RBRACK ]
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR l
ASSIGN =
IDENFR l
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR matrixMul2
LPARENT (
INTTK int
IDENFR a1
LBRACK [
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
INTTK int
IDENFR a2
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR op
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR l
ASSIGN =
INTCON 0
COMMA ,
IDENFR tmp
SEMICN ;
WHILETK while
LPARENT (
IDENFR m
GRE >
IDENFR i
RPARENT )
LBRACE {
IDENFR l
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR n
GRE >
IDENFR l
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
GRE >
IDENFR j
RPARENT )
LBRACE {
IDENFR tmp
ASSIGN =
IDENFR tmp
PLUS +
IDENFR a1
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
MULT *
IDENFR a2
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
IDENFR l
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR op
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR des
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR l
RBRACK ]
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR des2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR l
RBRACK ]
ASSIGN =
IDENFR tmp
SEMICN ;
RBRACE }
IDENFR l
ASSIGN =
IDENFR l
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR arraySum
LPARENT (
INTTK int
IDENFR a3
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR h
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR ans
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR h
RPARENT )
LBRACE {
IDENFR ans
ASSIGN =
IDENFR ans
PLUS +
IDENFR a3
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR rowSum
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373466\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "const declaration: const int a[4][2]={{1, 2}, {3, 4}, {5, 6}, {7, 8}}, b[2][1] = {{9}, {10}}\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "global var declaration: int c[1][2]={{11, 12}}\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "global var declaration(not initialized): des[4][1], des2[4][2]\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "use ConstDef in FuncFParam (exactly, the len of array)\n"
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
INTCON 4
SEMICN ;
IDENFR matrixMul
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "calculate a * b, your result is des[4][1] = {{%d}, {%d}, {%d}, {%d}}\n"
COMMA ,
IDENFR des
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR des
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR des
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR des
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
INTCON 4
SEMICN ;
IDENFR matrixMul2
LPARENT (
IDENFR des
COMMA ,
IDENFR c
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR rowSum
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR arraySum
LPARENT (
IDENFR des2
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR rowSum
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR arraySum
LPARENT (
IDENFR des2
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR rowSum
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR arraySum
LPARENT (
IDENFR des2
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR rowSum
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR arraySum
LPARENT (
IDENFR des2
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "calculate des * c\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "then calculate the sum of each row(store in rowSum[4])\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "your result is (4 row): %d, %d, %d, %d\n"
COMMA ,
IDENFR rowSum
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR rowSum
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR rowSum
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR rowSum
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "finish\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
