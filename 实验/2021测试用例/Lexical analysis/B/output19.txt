CONSTTK const
INTTK int
IDENFR g_const_1
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
IDENFR g_const_1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
PLUS +
INTCON 1
COMMA ,
IDENFR g_const_1
MINU -
INTCON 1
RBRACE }
COMMA ,
LBRACE {
IDENFR g_const_1
MULT *
INTCON 1
COMMA ,
INTCON 1
DIV /
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_4
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_5
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_7
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_1
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR g_var_2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
IDENFR g_const_1
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
PLUS +
INTCON 1
COMMA ,
IDENFR g_const_1
MINU -
INTCON 1
RBRACE }
COMMA ,
LBRACE {
IDENFR g_const_1
MULT *
INTCON 1
COMMA ,
INTCON 1
DIV /
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_4
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
PLUS +
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_5
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_7
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
PLUS +
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_8
SEMICN ;
INTTK int
IDENFR g_var_9
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR g_var_10
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR fun_int_1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_int_2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_int_3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_void_1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_void_2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_void_3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "test func, should be 2: %d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Exp
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
ASSIGN =
IDENFR a
PLUS +
IDENFR b
MINU -
IDENFR a
MULT *
IDENFR b
DIV /
INTCON 2
MOD %
INTCON 3
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test Exp, should be 5: %d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_Block
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "test Block, should be 2: %d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_if
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR a
PLUS +
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "test if, should be 2, 2: %d, %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_while
LPARENT (
INTTK int
IDENFR i
COMMA ,
INTTK int
IDENFR len
RPARENT )
LBRACE {
INTTK int
IDENFR count
ASSIGN =
IDENFR i
SEMICN ;
WHILETK while
LPARENT (
IDENFR count
LEQ <=
IDENFR len
RPARENT )
LBRACE {
IDENFR count
ASSIGN =
IDENFR count
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "test while, should be 6: %d\n"
COMMA ,
IDENFR count
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_break_continue
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
EQL ==
INTCON 0
AND &&
IDENFR j
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
CONTINUETK continue
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR j
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "test break continue, should be 0, 1: %d, %d\n"
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_printf
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "test printf, should be 2: %d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR test_getint
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test getint, should be 1: %d"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373135\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test func, should be 2: %d\n"
COMMA ,
IDENFR fun_int_3
LPARENT (
IDENFR g_var_3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
IDENFR fun_void_3
LPARENT (
IDENFR g_var_3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR test_Exp
LPARENT (
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR test_Block
LPARENT (
INTCON 2
RPARENT )
SEMICN ;
IDENFR test_if
LPARENT (
INTCON 2
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR test_while
LPARENT (
INTCON 0
COMMA ,
INTCON 5
RPARENT )
SEMICN ;
IDENFR test_break_continue
LPARENT (
RPARENT )
SEMICN ;
IDENFR test_printf
LPARENT (
INTCON 2
RPARENT )
SEMICN ;
IDENFR test_getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
