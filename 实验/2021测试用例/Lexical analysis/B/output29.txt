CONSTTK const
INTTK int
IDENFR pi
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR const2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR constconst
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR a33
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR const1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR zero
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR a1
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR p
COMMA ,
IDENFR q
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR getSqu
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
IDENFR x
MULT *
IDENFR x
SEMICN ;
RBRACE }
INTTK int
IDENFR getSquSum
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR size
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR size
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR k
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR getSqu
LPARENT (
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR sleep
LPARENT (
INTTK int
IDENFR s
RPARENT )
LBRACE {
RETURNTK return
IDENFR s
PLUS +
INTCON 101
SEMICN ;
RBRACE }
VOIDTK void
IDENFR sort
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR r
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
IDENFR l
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
IDENFR r
SEMICN ;
INTTK int
IDENFR medium
ASSIGN =
LPARENT (
IDENFR i
PLUS +
IDENFR j
RPARENT )
DIV /
INTCON 2
SEMICN ;
INTTK int
IDENFR temp
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LSS <
IDENFR a
LBRACK [
IDENFR medium
RBRACK ]
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR a
LBRACK [
IDENFR medium
RBRACK ]
RPARENT )
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LEQ <=
IDENFR j
RPARENT )
LBRACE {
IDENFR temp
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR temp
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR l
LSS <
IDENFR j
RPARENT )
IDENFR sort
LPARENT (
IDENFR a
COMMA ,
IDENFR l
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR r
GRE >
IDENFR i
RPARENT )
IDENFR sort
LPARENT (
IDENFR a
COMMA ,
IDENFR i
COMMA ,
IDENFR r
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR getD
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR size
RPARENT )
LBRACE {
INTTK int
IDENFR j
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR average
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR size
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR average
ASSIGN =
IDENFR sum
DIV /
IDENFR size
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR size
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR getSqu
LPARENT (
IDENFR average
MINU -
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
DIV /
IDENFR size
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR p
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR q
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR constconst
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR a1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR n
SEMICN ;
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR p
SEMICN ;
IDENFR a1
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR q
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373330\n"
RPARENT )
SEMICN ;
LBRACE {
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR m
RPARENT )
LBRACE {
LBRACE {
IDENFR n
ASSIGN =
IDENFR n
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR m
GRE >
IDENFR n
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR p
ASSIGN =
IDENFR getSqu
LPARENT (
IDENFR p
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR m
LSS <
IDENFR q
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "n %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "p %d\n"
COMMA ,
IDENFR p
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "i %d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
INTTK int
IDENFR D_const
ASSIGN =
IDENFR getD
LPARENT (
IDENFR const1
COMMA ,
INTCON 5
RPARENT )
SEMICN ;
INTTK int
IDENFR D_var
ASSIGN =
IDENFR getD
LPARENT (
IDENFR a1
COMMA ,
INTCON 5
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "sum of two D %d\n"
COMMA ,
IDENFR D_const
PLUS +
IDENFR D_var
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR n
GRE >
MINU -
IDENFR p
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "const D + 10 is %d -_-\n"
COMMA ,
IDENFR getD
LPARENT (
IDENFR const1
COMMA ,
INTCON 5
RPARENT )
PLUS +
INTCON 2
MULT *
INTCON 5
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "var D * 50 - 2000 is %d \n"
COMMA ,
IDENFR getD
LPARENT (
IDENFR a1
COMMA ,
INTCON 5
RPARENT )
MULT *
INTCON 50
MINU -
INTCON 2000
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
IDENFR sort
LPARENT (
IDENFR a1
COMMA ,
INTCON 0
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "after sort %d %d %d %d %d\n"
COMMA ,
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a1
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR a1
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR a1
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR a1
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Squ const2 + 101 %d\n"
COMMA ,
IDENFR sleep
LPARENT (
IDENFR getSquSum
LPARENT (
IDENFR a33
COMMA ,
INTCON 3
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR slee
SEMICN ;
IDENFR slee
ASSIGN =
IDENFR sleep
LPARENT (
INTCON 441212
RPARENT )
MULT *
IDENFR const2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR const2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
MULT *
IDENFR const2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR const2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "slee%d\n"
COMMA ,
IDENFR slee
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "sadhiukashjfasodifd51023sad65saf1erwg0fdss5a6d1asd56sa0ds55saad511sa2d31asd556gdsfsadsa\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
