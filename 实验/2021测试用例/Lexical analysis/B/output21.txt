INTTK int
IDENFR global_counter
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR innerProduct
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR length
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR res
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR length
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
IDENFR res
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR res
SEMICN ;
RBRACE }
VOIDTK void
IDENFR scaleBiasCombination
LPARENT (
INTTK int
IDENFR res
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR s1
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR s2
COMMA ,
INTTK int
IDENFR bias
COMMA ,
INTTK int
IDENFR length
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR length
RPARENT )
LBRACE {
IDENFR res
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR s1
PLUS +
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR s2
PLUS +
IDENFR bias
PLUS +
IDENFR global_counter
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR global_counter
ASSIGN =
IDENFR global_counter
PLUS +
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR elementWiseMultiply
LPARENT (
INTTK int
IDENFR res
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR length
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR length
RPARENT )
LBRACE {
IDENFR res
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR printVector
LPARENT (
INTTK int
IDENFR vec
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR length
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "[%d"
COMMA ,
IDENFR vec
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR length
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON ", %d"
COMMA ,
IDENFR vec
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "]\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373384\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 3
COMMA ,
INTCON 5
COMMA ,
INTCON 7
COMMA ,
INTCON 9
COMMA ,
INTCON 11
COMMA ,
INTCON 2
COMMA ,
INTCON 9
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 5
COMMA ,
INTCON 4
COMMA ,
INTCON 8
COMMA ,
INTCON 9
COMMA ,
INTCON 6
COMMA ,
INTCON 3
COMMA ,
INTCON 7
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR res1
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR res2
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR result
SEMICN ;
IDENFR printVector
LPARENT (
IDENFR a
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
IDENFR printVector
LPARENT (
IDENFR b
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
IDENFR result
ASSIGN =
IDENFR innerProduct
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
INTTK int
IDENFR INNER_PRODUCT_ANSWER
ASSIGN =
INTCON 324
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Inner product: expect %d, output: %d\n"
COMMA ,
IDENFR INNER_PRODUCT_ANSWER
COMMA ,
IDENFR result
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR INNER_PRODUCT_ANSWER
NEQ !=
IDENFR result
RPARENT )
RETURNTK return
INTCON 1
SEMICN ;
IDENFR scaleBiasCombination
LPARENT (
IDENFR res1
COMMA ,
IDENFR a
COMMA ,
INTCON 2
COMMA ,
IDENFR b
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
INTTK int
IDENFR SBC1_RESULT
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 12
COMMA ,
INTCON 25
COMMA ,
INTCON 26
COMMA ,
INTCON 42
COMMA ,
INTCON 49
COMMA ,
INTCON 44
COMMA ,
INTCON 17
COMMA ,
INTCON 43
COMMA ,
INTCON 21
COMMA ,
INTCON 23
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "SBC step 1: expect:"
RPARENT )
SEMICN ;
IDENFR printVector
LPARENT (
IDENFR SBC1_RESULT
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "output:"
RPARENT )
SEMICN ;
IDENFR printVector
LPARENT (
IDENFR res1
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR res1
LBRACK [
IDENFR i
RBRACK ]
NEQ !=
IDENFR SBC1_RESULT
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
RETURNTK return
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR scaleBiasCombination
LPARENT (
IDENFR res2
COMMA ,
IDENFR res1
COMMA ,
INTCON 2
COMMA ,
IDENFR b
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
IDENFR elementWiseMultiply
LPARENT (
IDENFR res1
COMMA ,
IDENFR res2
COMMA ,
IDENFR b
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
INTTK int
IDENFR FINAL_RESULT
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 70
COMMA ,
INTCON 350
COMMA ,
INTCON 276
COMMA ,
INTCON 904
COMMA ,
INTCON 1170
COMMA ,
INTCON 666
COMMA ,
INTCON 144
COMMA ,
INTCON 784
COMMA ,
INTCON 50
COMMA ,
INTCON 54
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "SBC step 2 and EWM: expect:"
RPARENT )
SEMICN ;
IDENFR printVector
LPARENT (
IDENFR FINAL_RESULT
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "output:"
RPARENT )
SEMICN ;
IDENFR printVector
LPARENT (
IDENFR res1
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR res1
LBRACK [
IDENFR i
RBRACK ]
NEQ !=
IDENFR FINAL_RESULT
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
RETURNTK return
INTCON 3
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n\n================================================================================\n                                     PASSED                                     \n================================================================================\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
