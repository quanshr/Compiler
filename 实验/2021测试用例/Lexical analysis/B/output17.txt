INTTK int
IDENFR array
LBRACK [
INTCON 100
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR len
ASSIGN =
INTCON 0
SEMICN ;
VOIDTK void
IDENFR swap
LPARENT (
INTTK int
IDENFR i
COMMA ,
INTTK int
IDENFR j
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "swap <%d %d> <-> <%d %d>\n"
COMMA ,
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR tmp
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
SEMICN ;
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR tmp
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR tmp
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR sort
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR len
MINU -
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR f
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR len
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
LSS <
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR swap
LPARENT (
IDENFR i
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
IDENFR f
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
EQL ==
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
GRE >
IDENFR array
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
IDENFR swap
LPARENT (
IDENFR i
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
IDENFR f
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR f
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR len
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373372\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 100
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR len
RPARENT )
LBRACE {
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR y
SEMICN ;
IDENFR y
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "input > %d %d\n"
COMMA ,
IDENFR x
COMMA ,
IDENFR y
RPARENT )
SEMICN ;
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR x
SEMICN ;
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR y
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR len
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d -> %d\n"
COMMA ,
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR sort
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR len
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d -> %d\n"
COMMA ,
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ""
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
