INTTK int
IDENFR myfun1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR myfun2
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR myfun3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR adder
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR swapFirst
LPARENT (
INTTK int
IDENFR n1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n2
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR temp
ASSIGN =
IDENFR n1
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR n1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR n2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR n2
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR temp
SEMICN ;
RBRACE }
INTTK int
IDENFR array2Fun
LPARENT (
INTTK int
IDENFR n1
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR n2
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR n1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR n2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testWhile
LPARENT (
RPARENT )
LBRACE {
WHILETK while
LPARENT (
INTCON 0
RPARENT )
LBRACE {
SEMICN ;
SEMICN ;
RBRACE }
INTTK int
IDENFR a
ASSIGN =
INTCON 10
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
MINU -
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "while error!"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR b
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR b
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
MULT *
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR b
EQL ==
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR c
NEQ !=
INTCON 16
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "break error!"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR d
ASSIGN =
INTCON 3
SEMICN ;
IDENFR b
ASSIGN =
INTCON 6
SEMICN ;
WHILETK while
LPARENT (
IDENFR b
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR b
MOD %
INTCON 2
EQL ==
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR d
ASSIGN =
IDENFR d
MULT *
INTCON 3
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR d
NEQ !=
INTCON 81
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "continue error!"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR u
ASSIGN =
INTCON 9
SEMICN ;
WHILETK while
LPARENT (
IDENFR u
GRE >
INTCON 0
RPARENT )
IDENFR u
ASSIGN =
IDENFR u
MINU -
INTCON 10
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testIf
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 9
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 8
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 10
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 9
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 10
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 20
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 30
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 100
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 10
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 1000
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 8
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 10000
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 9
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 30000
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 100
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 3000
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 9
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "b=%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testIO
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n1
ASSIGN =
INTCON 20
SEMICN ;
IDENFR n1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR temp
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR n2
COMMA ,
IDENFR temp2
ASSIGN =
INTCON 20
SEMICN ;
IDENFR n2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR temp2
RPARENT )
SEMICN ;
INTTK int
IDENFR n4
SEMICN ;
IDENFR n4
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR n4
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR testRecurrence
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR temp
SEMICN ;
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR temp
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR temp
ASSIGN =
IDENFR testRecurrence
LPARENT (
IDENFR n
MINU -
INTCON 2
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
IDENFR temp
MULT *
IDENFR testRecurrence
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
MULT *
IDENFR n
MULT *
IDENFR testRecurrence
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testBlock
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 600
SEMICN ;
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 900
SEMICN ;
LBRACE {
INTTK int
IDENFR b
ASSIGN =
IDENFR a
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 7
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR a
SEMICN ;
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 10
MULT *
IDENFR a
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 300
MULT *
IDENFR a
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
IDENFR b
ASSIGN =
IDENFR b
PLUS +
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "testBlock : b=%d\n"
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
INTTK int
IDENFR clean
LPARENT (
INTTK int
IDENFR target
COMMA ,
INTTK int
IDENFR len1
COMMA ,
INTTK int
IDENFR myArray
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR myArray2
LBRACK [
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
INTTK int
IDENFR len
RPARENT )
LBRACE {
INTTK int
IDENFR index
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR index
LSS <
IDENFR len1
RPARENT )
LBRACE {
IDENFR myArray
LBRACK [
IDENFR index
RBRACK ]
ASSIGN =
IDENFR target
SEMICN ;
IDENFR index
ASSIGN =
IDENFR index
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR getSumOfArray
LPARENT (
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR nums
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR l
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR nums
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR sum
PLUS +
INTCON 1
MINU -
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR getSumOfArray2
LPARENT (
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR line
COMMA ,
INTTK int
IDENFR nums
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR l
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR nums
LBRACK [
IDENFR l
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR line
RBRACK ]
SEMICN ;
IDENFR l
ASSIGN =
IDENFR l
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19231177\n"
RPARENT )
SEMICN ;
IDENFR testWhile
LPARENT (
RPARENT )
SEMICN ;
IDENFR testIf
LPARENT (
RPARENT )
SEMICN ;
IDENFR testIO
LPARENT (
RPARENT )
SEMICN ;
IDENFR testBlock
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR testRecurrence
LPARENT (
INTCON 5
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR n
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1 2 3 4 sum is : %d\n"
COMMA ,
IDENFR getSumOfArray
LPARENT (
INTCON 4
COMMA ,
IDENFR n
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR n2
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 10
COMMA ,
INTCON 20
COMMA ,
INTCON 30
RBRACE }
COMMA ,
LBRACE {
INTCON 100
COMMA ,
INTCON 200
COMMA ,
INTCON 300
RBRACE }
COMMA ,
LBRACE {
INTCON 1000
COMMA ,
INTCON 2000
COMMA ,
INTCON 3000
RBRACE }
COMMA ,
LBRACE {
INTCON 10000
COMMA ,
INTCON 20000
COMMA ,
INTCON 30000
RBRACE }
RBRACE }
SEMICN ;
IDENFR swapFirst
LPARENT (
IDENFR n2
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR n2
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR swapFirst
LPARENT (
IDENFR n
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
INTTK int
IDENFR temp0
ASSIGN =
IDENFR getSumOfArray2
LPARENT (
INTCON 5
COMMA ,
INTCON 0
COMMA ,
IDENFR n2
RPARENT )
SEMICN ;
INTTK int
IDENFR temp
ASSIGN =
IDENFR getSumOfArray2
LPARENT (
INTCON 5
COMMA ,
INTCON 1
COMMA ,
IDENFR n2
RPARENT )
SEMICN ;
INTTK int
IDENFR temp1
ASSIGN =
IDENFR getSumOfArray2
LPARENT (
INTCON 5
COMMA ,
INTCON 2
COMMA ,
IDENFR n2
RPARENT )
SEMICN ;
INTTK int
IDENFR nnn1
ASSIGN =
INTCON 1
COMMA ,
IDENFR nnn2
ASSIGN =
INTCON 2
COMMA ,
IDENFR nnn3
ASSIGN =
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "line%d is:%d;line%d is : %d;  line%d is : %d;\n"
COMMA ,
IDENFR nnn1
COMMA ,
IDENFR temp0
COMMA ,
IDENFR nnn2
COMMA ,
IDENFR temp
COMMA ,
IDENFR nnn3
COMMA ,
IDENFR temp1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d+2=3\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
INTTK int
IDENFR p1
ASSIGN =
INTCON 1
COMMA ,
IDENFR p2
ASSIGN =
INTCON 2
COMMA ,
IDENFR p3
ASSIGN =
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d+%d=%d\n"
COMMA ,
IDENFR p1
COMMA ,
IDENFR p2
COMMA ,
IDENFR p3
RPARENT )
SEMICN ;
INTTK int
IDENFR remain
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR remain_index
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR remain_index
LSS <
IDENFR remain
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19231177\n"
RPARENT )
SEMICN ;
IDENFR remain_index
ASSIGN =
IDENFR remain_index
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
