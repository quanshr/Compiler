VOIDTK void
IDENFR move
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 2
RPARENT )
LBRACE {
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IDENFR move
LPARENT (
IDENFR n
MINU -
INTCON 2
COMMA ,
IDENFR a
COMMA ,
IDENFR c
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR move
LPARENT (
IDENFR n
MINU -
INTCON 2
COMMA ,
IDENFR b
COMMA ,
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
RBRACE }
VOIDTK void
IDENFR solve
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 2
RPARENT )
LBRACE {
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IDENFR move
LPARENT (
IDENFR n
MINU -
INTCON 2
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR move
LPARENT (
IDENFR n
MINU -
INTCON 2
COMMA ,
IDENFR c
COMMA ,
IDENFR b
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Move from %d to %d\n"
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR solve
LPARENT (
IDENFR n
MINU -
INTCON 2
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
RBRACE }
VOIDTK void
IDENFR dfs
LPARENT (
INTTK int
IDENFR src
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR vis
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR reflect
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR cur
COMMA ,
INTTK int
IDENFR tot
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR cur
EQL ==
IDENFR tot
RPARENT )
LBRACE {
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR tot
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR reflect
LBRACK [
IDENFR i
PLUS +
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR tot
RPARENT )
LBRACE {
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR vis
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
LBRACE {
LBRACE {
IDENFR vis
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR src
LBRACK [
IDENFR cur
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IDENFR dfs
LPARENT (
IDENFR src
COMMA ,
IDENFR vis
COMMA ,
IDENFR reflect
COMMA ,
IDENFR cur
PLUS +
INTCON 1
COMMA ,
IDENFR tot
RPARENT )
SEMICN ;
IDENFR vis
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR matrixPrint
LPARENT (
INTTK int
IDENFR src
LBRACK [
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR total
RPARENT )
LBRACE {
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR total
RPARENT )
LBRACE {
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR matrixMul
LPARENT (
INTTK int
IDENFR ans
LBRACK [
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
INTTK int
IDENFR srcA
LBRACK [
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
INTTK int
IDENFR srcB
LBRACK [
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR matrixPrint
LPARENT (
IDENFR srcA
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
IDENFR matrixPrint
LPARENT (
IDENFR srcB
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR total
RPARENT )
LBRACE {
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR total
RPARENT )
LBRACE {
LBRACE {
INTTK int
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
IDENFR ans
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
LSS <
IDENFR total
RPARENT )
LBRACE {
LBRACE {
IDENFR ans
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR ans
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR srcA
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
MULT *
IDENFR srcB
LBRACK [
IDENFR k
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR matrixPrint
LPARENT (
IDENFR srcA
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
IDENFR matrixPrint
LPARENT (
IDENFR srcB
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
IDENFR matrixPrint
LPARENT (
IDENFR ans
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373354\n"
RPARENT )
SEMICN ;
IDENFR solve
LPARENT (
IDENFR n
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR src
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 9
COMMA ,
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
COMMA ,
INTCON 5
COMMA ,
INTCON 4
COMMA ,
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR vis
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR b
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
COMMA ,
INTCON 5
COMMA ,
INTCON 4
COMMA ,
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 9
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 7
COMMA ,
INTCON 6
COMMA ,
INTCON 5
COMMA ,
INTCON 4
COMMA ,
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 9
COMMA ,
INTCON 8
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
INTCON 5
COMMA ,
INTCON 4
COMMA ,
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 9
COMMA ,
INTCON 8
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 4
COMMA ,
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 9
COMMA ,
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
PLUS +
INTCON 2
SEMICN ;
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
PLUS +
INTCON 3
SEMICN ;
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
PLUS +
INTCON 4
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR vis
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
IDENFR n
RPARENT )
BREAKTK break
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IDENFR dfs
LPARENT (
IDENFR src
COMMA ,
IDENFR vis
COMMA ,
IDENFR a
COMMA ,
INTCON 0
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR vis
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
IDENFR n
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RBRACE }
IDENFR dfs
LPARENT (
IDENFR src
COMMA ,
IDENFR vis
COMMA ,
IDENFR b
COMMA ,
INTCON 0
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR vis
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
CONTINUETK continue
SEMICN ;
BREAKTK break
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IDENFR dfs
LPARENT (
IDENFR src
COMMA ,
IDENFR vis
COMMA ,
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 0
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR vis
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
CONTINUETK continue
SEMICN ;
ELSETK else
BREAKTK break
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IDENFR dfs
LPARENT (
IDENFR src
COMMA ,
IDENFR vis
COMMA ,
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
INTCON 0
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
INTTK int
IDENFR d
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 307728049
COMMA ,
MINU -
INTCON 1625382311
COMMA ,
INTCON 1271106322
COMMA ,
INTCON 309930583
COMMA ,
INTCON 2007032850
RBRACE }
COMMA ,
LBRACE {
INTCON 1074055550
COMMA ,
INTCON 2036831205
COMMA ,
MINU -
INTCON 492323543
COMMA ,
MINU -
INTCON 252604752
COMMA ,
INTCON 1295820596
RBRACE }
COMMA ,
LBRACE {
INTCON 728458994
COMMA ,
INTCON 1673642498
COMMA ,
MINU -
INTCON 51943305
COMMA ,
MINU -
INTCON 1854253096
COMMA ,
MINU -
INTCON 1024571774
RBRACE }
COMMA ,
LBRACE {
INTCON 1430035460
COMMA ,
INTCON 1705232663
COMMA ,
MINU -
INTCON 1803769826
COMMA ,
MINU -
INTCON 1485716863
COMMA ,
MINU -
INTCON 1192520056
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1503793409
COMMA ,
INTCON 2027983592
COMMA ,
MINU -
INTCON 1911831470
COMMA ,
MINU -
INTCON 1387735054
COMMA ,
MINU -
INTCON 274170342
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR e
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
MINU -
INTCON 39878981
COMMA ,
INTCON 1475936537
COMMA ,
INTCON 1944942266
COMMA ,
INTCON 1579815806
COMMA ,
INTCON 1734290467
RBRACE }
COMMA ,
LBRACE {
INTCON 1606724733
COMMA ,
MINU -
INTCON 1839064934
COMMA ,
INTCON 1749681186
COMMA ,
INTCON 1409364573
COMMA ,
MINU -
INTCON 68127266
RBRACE }
COMMA ,
LBRACE {
INTCON 1869282840
COMMA ,
INTCON 1574753938
COMMA ,
INTCON 1959861217
COMMA ,
MINU -
INTCON 425501077
COMMA ,
MINU -
INTCON 1281736928
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1304579021
COMMA ,
MINU -
INTCON 1777897472
COMMA ,
MINU -
INTCON 1921297034
COMMA ,
INTCON 1623258471
COMMA ,
MINU -
INTCON 226241316
RBRACE }
COMMA ,
LBRACE {
INTCON 824482268
COMMA ,
MINU -
INTCON 1840038765
COMMA ,
MINU -
INTCON 1238621050
COMMA ,
INTCON 1453319654
COMMA ,
MINU -
INTCON 1338682930
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR f
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
IDENFR matrixMul
LPARENT (
IDENFR f
COMMA ,
IDENFR d
COMMA ,
IDENFR e
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
IDENFR matrixMul
LPARENT (
IDENFR f
COMMA ,
IDENFR e
COMMA ,
IDENFR d
COMMA ,
INTCON 5
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373354\n"
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
