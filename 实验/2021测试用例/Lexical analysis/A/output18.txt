CONSTTK const
INTTK int
IDENFR N
ASSIGN =
INTCON 512
SEMICN ;
CONSTTK const
INTTK int
IDENFR mod
ASSIGN =
INTCON 7717
SEMICN ;
CONSTTK const
INTTK int
IDENFR gg
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR ppp
ASSIGN =
INTCON 1
COMMA ,
IDENFR qqq
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR array3
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR array4
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 4
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR uN
COMMA ,
IDENFR vN
SEMICN ;
INTTK int
IDENFR m
SEMICN ;
INTTK int
IDENFR g
LBRACK [
INTCON 512
RBRACK ]
LBRACK [
INTCON 512
RBRACK ]
SEMICN ;
INTTK int
IDENFR match
LBRACK [
INTCON 512
RBRACK ]
SEMICN ;
INTTK int
IDENFR vis
LBRACK [
INTCON 512
RBRACK ]
SEMICN ;
INTTK int
IDENFR fact
LBRACK [
INTCON 15
RBRACK ]
SEMICN ;
INTTK int
IDENFR ifact
LBRACK [
INTCON 15
RBRACK ]
SEMICN ;
INTTK int
IDENFR inv
LBRACK [
INTCON 15
RBRACK ]
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR array1
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 10
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 1
COMMA ,
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 4
COMMA ,
INTCON 9
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR array2
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 2
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
INTCON 5
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 10
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR precalifact
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 499122177
COMMA ,
INTCON 166374059
COMMA ,
INTCON 291154603
COMMA ,
INTCON 856826403
COMMA ,
INTCON 641926577
COMMA ,
INTCON 376916469
COMMA ,
INTCON 421456191
COMMA ,
INTCON 712324701
COMMA ,
INTCON 370705776
RBRACE }
SEMICN ;
INTTK int
IDENFR x
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 4
COMMA ,
INTCON 3
COMMA ,
INTCON 5
COMMA ,
INTCON 8
COMMA ,
INTCON 10
COMMA ,
INTCON 7
COMMA ,
INTCON 9
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR y
LBRACK [
INTCON 11
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 6
COMMA ,
INTCON 3
COMMA ,
INTCON 8
COMMA ,
INTCON 10
COMMA ,
INTCON 5
COMMA ,
INTCON 7
COMMA ,
INTCON 2
COMMA ,
INTCON 4
COMMA ,
INTCON 9
RBRACE }
SEMICN ;
INTTK int
IDENFR mydp
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR min
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR max
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
RETURNTK return
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR dfs
LPARENT (
INTTK int
IDENFR u
RPARENT )
LBRACE {
INTTK int
IDENFR v
SEMICN ;
IDENFR v
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR v
LSS <
IDENFR vN
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR g
LBRACK [
IDENFR u
RBRACK ]
LBRACK [
IDENFR v
RBRACK ]
AND &&
NOT !
IDENFR vis
LBRACK [
IDENFR v
RBRACK ]
RPARENT )
LBRACE {
IDENFR vis
LBRACK [
IDENFR v
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR match
LBRACK [
IDENFR v
RBRACK ]
EQL ==
MINU -
INTCON 1
OR ||
IDENFR dfs
LPARENT (
IDENFR match
LBRACK [
IDENFR v
RBRACK ]
RPARENT )
RPARENT )
LBRACE {
IDENFR match
LBRACK [
IDENFR v
RBRACK ]
ASSIGN =
IDENFR u
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR v
ASSIGN =
IDENFR v
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR hungary
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR res
SEMICN ;
IDENFR res
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR u
SEMICN ;
IDENFR u
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR u
LSS <
IDENFR N
RPARENT )
LBRACE {
IDENFR match
LBRACK [
IDENFR u
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR u
ASSIGN =
IDENFR u
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR u
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR u
LSS <
IDENFR uN
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR N
RPARENT )
LBRACE {
IDENFR vis
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR dfs
LPARENT (
IDENFR u
RPARENT )
RPARENT )
LBRACE {
IDENFR res
ASSIGN =
IDENFR res
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR u
ASSIGN =
IDENFR u
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR res
SEMICN ;
RBRACE }
INTTK int
IDENFR ksm
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR ret
SEMICN ;
IDENFR ret
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR b
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
MOD %
INTCON 2
EQL ==
INTCON 1
RPARENT )
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
IDENFR a
MOD %
IDENFR mod
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MULT *
IDENFR a
MOD %
IDENFR mod
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
DIV /
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ret
SEMICN ;
RBRACE }
INTTK int
IDENFR LCIS
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR dp
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR val
SEMICN ;
IDENFR val
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR ans
SEMICN ;
IDENFR ans
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
IDENFR val
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
EQL ==
IDENFR b
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
LBRACE {
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR val
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR dp
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
LBRACK [
IDENFR j
RBRACK ]
LSS <
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
LBRACE {
IDENFR val
ASSIGN =
IDENFR max
LPARENT (
IDENFR val
COMMA ,
IDENFR dp
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IDENFR ans
ASSIGN =
IDENFR max
LPARENT (
IDENFR ans
COMMA ,
IDENFR dp
LBRACK [
IDENFR n
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
IDENFR trashfind
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR tobefind
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR flag
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
EQL ==
IDENFR tobefind
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
EQL ==
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
IDENFR flag
SEMICN ;
RBRACE }
INTTK int
IDENFR blocksum
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ans
SEMICN ;
IDENFR ans
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR v
ASSIGN =
IDENFR n
DIV /
IDENFR i
SEMICN ;
INTTK int
IDENFR last
ASSIGN =
IDENFR n
DIV /
IDENFR v
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR ans
PLUS +
LPARENT (
IDENFR last
MINU -
IDENFR i
PLUS +
INTCON 1
RPARENT )
MULT *
IDENFR v
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR ans
MOD %
IDENFR mod
SEMICN ;
IDENFR i
ASSIGN =
IDENFR last
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
VOIDTK void
IDENFR init
LPARENT (
RPARENT )
LBRACE {
IDENFR fact
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR fact
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR fact
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR fact
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
MULT *
IDENFR i
MOD %
IDENFR mod
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR ifact
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
IDENFR ksm
LPARENT (
IDENFR fact
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR mod
MINU -
INTCON 2
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 9
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR ifact
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR ifact
LBRACK [
IDENFR i
PLUS +
INTCON 1
RBRACK ]
MULT *
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
MOD %
IDENFR mod
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR inv
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 10
RPARENT )
LBRACE {
INTTK int
IDENFR p
SEMICN ;
IDENFR p
ASSIGN =
IDENFR mod
MINU -
IDENFR mod
DIV /
IDENFR i
SEMICN ;
INTTK int
IDENFR pos
SEMICN ;
IDENFR pos
ASSIGN =
IDENFR mod
MOD %
IDENFR i
SEMICN ;
IDENFR inv
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR p
MULT *
IDENFR inv
LBRACK [
IDENFR pos
RBRACK ]
MOD %
IDENFR mod
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR comb
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
INTTK int
IDENFR ret
SEMICN ;
IDENFR ret
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
IDENFR j
ASSIGN =
IDENFR a
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR b
RPARENT )
LBRACE {
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
IDENFR j
MOD %
IDENFR mod
SEMICN ;
IDENFR ret
ASSIGN =
IDENFR ret
MULT *
IDENFR inv
LBRACK [
IDENFR i
RBRACK ]
MOD %
IDENFR mod
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ret
SEMICN ;
RBRACE }
INTTK int
IDENFR comb2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
GRE >
IDENFR a
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
INTTK int
IDENFR pos
SEMICN ;
IDENFR pos
ASSIGN =
IDENFR a
MINU -
IDENFR b
SEMICN ;
RETURNTK return
IDENFR fact
LBRACK [
IDENFR a
RBRACK ]
MULT *
IDENFR ifact
LBRACK [
IDENFR b
RBRACK ]
MOD %
IDENFR mod
MULT *
IDENFR ifact
LBRACK [
IDENFR pos
RBRACK ]
MOD %
IDENFR mod
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373807\n"
RPARENT )
SEMICN ;
IDENFR init
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR C5_3
SEMICN ;
IDENFR C5_3
ASSIGN =
IDENFR comb
LPARENT (
INTCON 5
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
INTTK int
IDENFR C6_4
SEMICN ;
IDENFR C6_4
ASSIGN =
IDENFR comb2
LPARENT (
INTCON 6
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
INTTK int
IDENFR last
SEMICN ;
IDENFR last
ASSIGN =
IDENFR trashfind
LPARENT (
IDENFR array1
COMMA ,
INTCON 5
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
INTTK int
IDENFR sum
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR blocksum
LPARENT (
INTCON 10
RPARENT )
SEMICN ;
INTTK int
IDENFR lcis_count
SEMICN ;
IDENFR lcis_count
ASSIGN =
IDENFR LCIS
LPARENT (
IDENFR x
COMMA ,
IDENFR y
COMMA ,
INTCON 10
COMMA ,
IDENFR mydp
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR lcis_count
RPARENT )
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR C5_3
PLUS +
IDENFR C6_4
PLUS +
IDENFR last
SEMICN ;
IDENFR uN
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR vN
ASSIGN =
IDENFR uN
SEMICN ;
INTTK int
IDENFR u
SEMICN ;
INTTK int
IDENFR v
SEMICN ;
WHILETK while
LPARENT (
IDENFR m
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR u
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR v
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR u
ASSIGN =
IDENFR u
MINU -
INTCON 1
SEMICN ;
IDENFR v
ASSIGN =
IDENFR v
MINU -
INTCON 1
SEMICN ;
IDENFR g
LBRACK [
IDENFR u
RBRACK ]
LBRACK [
IDENFR v
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
MINU -
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR anshungary
SEMICN ;
IDENFR anshungary
ASSIGN =
IDENFR hungary
LPARENT (
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
