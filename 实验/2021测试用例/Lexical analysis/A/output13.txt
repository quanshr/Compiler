INTTK int
IDENFR matrix
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR seed
COMMA ,
IDENFR buf
LBRACK [
INTCON 510
RBRACK ]
COMMA ,
IDENFR src
LBRACK [
INTCON 510
RBRACK ]
SEMICN ;
CONSTTK const
INTTK int
IDENFR mul
ASSIGN =
INTCON 19260817
COMMA ,
IDENFR add
ASSIGN =
INTCON 23333
SEMICN ;
CONSTTK const
INTTK int
IDENFR reflect1
LBRACK [
INTCON 50
RBRACK ]
ASSIGN =
LBRACE {
MINU -
INTCON 711942876
COMMA ,
MINU -
INTCON 1060809599
COMMA ,
INTCON 1758839997
COMMA ,
INTCON 423174272
COMMA ,
INTCON 1412407466
COMMA ,
INTCON 375872692
COMMA ,
INTCON 1543568839
COMMA ,
INTCON 915987033
COMMA ,
INTCON 698198080
COMMA ,
MINU -
INTCON 2143283456
COMMA ,
INTCON 2059223660
COMMA ,
MINU -
INTCON 34179219
COMMA ,
INTCON 378910912
COMMA ,
INTCON 1498631475
COMMA ,
MINU -
INTCON 1853883889
COMMA ,
INTCON 1640319187
COMMA ,
INTCON 1163758804
COMMA ,
MINU -
INTCON 931895085
COMMA ,
MINU -
INTCON 2061833199
COMMA ,
MINU -
INTCON 1556924115
COMMA ,
MINU -
INTCON 845977183
COMMA ,
INTCON 1847164385
COMMA ,
INTCON 1665603629
COMMA ,
MINU -
INTCON 1703548726
COMMA ,
MINU -
INTCON 344459473
COMMA ,
MINU -
INTCON 1589712906
COMMA ,
INTCON 149613887
COMMA ,
MINU -
INTCON 396337451
COMMA ,
INTCON 1064449581
COMMA ,
MINU -
INTCON 307889588
COMMA ,
INTCON 1661525227
COMMA ,
MINU -
INTCON 1284472061
COMMA ,
MINU -
INTCON 499795837
COMMA ,
INTCON 255615189
COMMA ,
MINU -
INTCON 729577785
COMMA ,
MINU -
INTCON 1032749994
COMMA ,
MINU -
INTCON 768262768
COMMA ,
MINU -
INTCON 597607786
COMMA ,
INTCON 851269079
COMMA ,
INTCON 1196148301
COMMA ,
MINU -
INTCON 429326133
COMMA ,
INTCON 882810866
COMMA ,
INTCON 115460578
COMMA ,
INTCON 1991442912
COMMA ,
INTCON 623829448
COMMA ,
MINU -
INTCON 1012146871
COMMA ,
MINU -
INTCON 1954608496
COMMA ,
INTCON 884135322
COMMA ,
MINU -
INTCON 1105545598
COMMA ,
INTCON 1517757891
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR reflect2
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
MINU -
INTCON 1152785601
COMMA ,
INTCON 1891446969
COMMA ,
INTCON 938484211
COMMA ,
MINU -
INTCON 1596516698
COMMA ,
INTCON 1681072330
COMMA ,
INTCON 1317584163
COMMA ,
MINU -
INTCON 484821643
COMMA ,
INTCON 489138378
COMMA ,
MINU -
INTCON 1535659242
COMMA ,
INTCON 2041004366
RBRACE }
COMMA ,
LBRACE {
INTCON 128222498
COMMA ,
INTCON 1090169129
COMMA ,
MINU -
INTCON 347746822
COMMA ,
MINU -
INTCON 326257601
COMMA ,
MINU -
INTCON 1366930863
COMMA ,
MINU -
INTCON 1094012930
COMMA ,
MINU -
INTCON 582270185
COMMA ,
MINU -
INTCON 1129905221
COMMA ,
MINU -
INTCON 700344045
COMMA ,
INTCON 851179157
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 823961496
COMMA ,
INTCON 2103453081
COMMA ,
MINU -
INTCON 402114823
COMMA ,
INTCON 2139806715
COMMA ,
MINU -
INTCON 732814375
COMMA ,
MINU -
INTCON 923421957
COMMA ,
MINU -
INTCON 335456832
COMMA ,
INTCON 1792163742
COMMA ,
INTCON 303341687
COMMA ,
INTCON 2135186416
RBRACE }
COMMA ,
LBRACE {
INTCON 1302967469
COMMA ,
INTCON 1623817872
COMMA ,
INTCON 898372270
COMMA ,
MINU -
INTCON 812618050
COMMA ,
MINU -
INTCON 1403178881
COMMA ,
MINU -
INTCON 1394347584
COMMA ,
MINU -
INTCON 164180074
COMMA ,
MINU -
INTCON 121807758
COMMA ,
MINU -
INTCON 1732202680
COMMA ,
INTCON 1205353033
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1776328495
COMMA ,
INTCON 958769364
COMMA ,
INTCON 47496017
COMMA ,
MINU -
INTCON 1384738865
COMMA ,
INTCON 1751940200
COMMA ,
MINU -
INTCON 97172568
COMMA ,
INTCON 502251849
COMMA ,
MINU -
INTCON 1749005702
COMMA ,
MINU -
INTCON 921534697
COMMA ,
MINU -
INTCON 1202408560
RBRACE }
COMMA ,
LBRACE {
INTCON 307728049
COMMA ,
MINU -
INTCON 1625382311
COMMA ,
INTCON 1271106322
COMMA ,
INTCON 309930583
COMMA ,
INTCON 2007032850
COMMA ,
INTCON 1074055550
COMMA ,
INTCON 2036831205
COMMA ,
MINU -
INTCON 492323543
COMMA ,
MINU -
INTCON 252604752
COMMA ,
INTCON 1295820596
RBRACE }
COMMA ,
LBRACE {
INTCON 728458994
COMMA ,
INTCON 1673642498
COMMA ,
MINU -
INTCON 51943305
COMMA ,
MINU -
INTCON 1854253096
COMMA ,
MINU -
INTCON 1024571774
COMMA ,
INTCON 1430035460
COMMA ,
INTCON 1705232663
COMMA ,
MINU -
INTCON 1803769826
COMMA ,
MINU -
INTCON 1485716863
COMMA ,
MINU -
INTCON 1192520056
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1503793409
COMMA ,
INTCON 2027983592
COMMA ,
MINU -
INTCON 1911831470
COMMA ,
MINU -
INTCON 1387735054
COMMA ,
MINU -
INTCON 274170342
COMMA ,
MINU -
INTCON 39878981
COMMA ,
INTCON 1475936537
COMMA ,
INTCON 1944942266
COMMA ,
INTCON 1579815806
COMMA ,
INTCON 1734290467
RBRACE }
COMMA ,
LBRACE {
INTCON 1606724733
COMMA ,
MINU -
INTCON 1839064934
COMMA ,
INTCON 1749681186
COMMA ,
INTCON 1409364573
COMMA ,
MINU -
INTCON 68127266
COMMA ,
INTCON 1869282840
COMMA ,
INTCON 1574753938
COMMA ,
INTCON 1959861217
COMMA ,
MINU -
INTCON 425501077
COMMA ,
MINU -
INTCON 1281736928
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1304579021
COMMA ,
MINU -
INTCON 1777897472
COMMA ,
MINU -
INTCON 1921297034
COMMA ,
INTCON 1623258471
COMMA ,
MINU -
INTCON 226241316
COMMA ,
INTCON 824482268
COMMA ,
MINU -
INTCON 1840038765
COMMA ,
MINU -
INTCON 1238621050
COMMA ,
INTCON 1453319654
COMMA ,
MINU -
INTCON 1338682930
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR rand
LPARENT (
RPARENT )
LBRACE {
IDENFR seed
ASSIGN =
IDENFR mul
MULT *
IDENFR seed
PLUS +
IDENFR add
SEMICN ;
RETURNTK return
IDENFR seed
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printOne
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
IDENFR num
ASSIGN =
IDENFR num
MULT *
IDENFR reflect1
LBRACK [
LPARENT (
IDENFR num
MOD %
INTCON 50
PLUS +
INTCON 50
RPARENT )
MOD %
INTCON 50
RBRACK ]
SEMICN ;
INTTK int
IDENFR select
ASSIGN =
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
INTCON 4
PLUS +
INTCON 4
RPARENT )
MOD %
INTCON 4
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "ooo%d"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 2
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%dooo"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 3
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "ooo%dooo"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printTwo
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
IDENFR num1
ASSIGN =
IDENFR num1
MULT *
IDENFR reflect2
LBRACK [
LPARENT (
IDENFR num1
MOD %
INTCON 10
PLUS +
INTCON 10
RPARENT )
MOD %
INTCON 10
RBRACK ]
LBRACK [
LPARENT (
IDENFR num2
MOD %
INTCON 10
PLUS +
INTCON 10
RPARENT )
MOD %
INTCON 10
RBRACK ]
SEMICN ;
IDENFR num2
ASSIGN =
IDENFR num2
MULT *
IDENFR reflect2
LBRACK [
LPARENT (
IDENFR num2
MOD %
INTCON 10
PLUS +
INTCON 10
RPARENT )
MOD %
INTCON 10
RBRACK ]
LBRACK [
LPARENT (
IDENFR num1
MOD %
INTCON 10
PLUS +
INTCON 10
RPARENT )
MOD %
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR select
ASSIGN =
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
INTCON 8
PLUS +
INTCON 8
RPARENT )
MOD %
INTCON 8
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "ppp%d%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 2
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d%dppp"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 3
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "ppp%d%dppp"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 4
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%dppp%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "ppp%dppp%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 6
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%dppp%dppp"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON "ppp%dppp%dppp"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printThree
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
COMMA ,
INTTK int
IDENFR num3
RPARENT )
LBRACE {
IDENFR num1
ASSIGN =
IDENFR num1
MULT *
IDENFR reflect1
LBRACK [
LPARENT (
IDENFR num1
MOD %
INTCON 50
PLUS +
INTCON 50
RPARENT )
MOD %
INTCON 50
RBRACK ]
SEMICN ;
IDENFR num2
ASSIGN =
IDENFR num2
MULT *
IDENFR reflect2
LBRACK [
LPARENT (
IDENFR num2
MOD %
INTCON 10
PLUS +
INTCON 10
RPARENT )
MOD %
INTCON 10
RBRACK ]
LBRACK [
LPARENT (
IDENFR num3
MOD %
INTCON 10
PLUS +
INTCON 10
RPARENT )
MOD %
INTCON 10
RBRACK ]
SEMICN ;
IDENFR num3
ASSIGN =
IDENFR num3
MULT *
IDENFR reflect2
LBRACK [
LPARENT (
IDENFR num3
MOD %
INTCON 10
PLUS +
INTCON 10
RPARENT )
MOD %
INTCON 10
RBRACK ]
LBRACK [
LPARENT (
IDENFR num2
MOD %
INTCON 10
PLUS +
INTCON 10
RPARENT )
MOD %
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR select
ASSIGN =
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
INTCON 16
PLUS +
INTCON 16
RPARENT )
MOD %
INTCON 16
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d%d%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "qqq%d%d%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 2
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d%d%dqqq"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 3
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "qqq%d%d%dqqq"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 4
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%dqqq%d%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 5
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "qqq%dqqq%d%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 6
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%dqqq%d%dqqq"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 7
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "qqq%dqqq%d%dqqq"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 8
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d%dqqq%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 9
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "qqq%d%dqqq%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 10
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d%dqqq%dqqq"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 11
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "qqq%d%dqqq%dqqq"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 12
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%dqqq%dqqq%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 13
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "qqq%dqqq%dqqq%d"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 14
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%dqqq%dqqq%dqqq"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON "qqq%dqqq%dqqq%dqqq"
COMMA ,
IDENFR num1
COMMA ,
IDENFR num2
COMMA ,
IDENFR num3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR initArr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR total
RPARENT )
LBRACE {
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR rand
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR initDouble
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR total
RPARENT )
LBRACE {
IDENFR initArr
LPARENT (
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR calSum
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR ans
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR total
RPARENT )
LBRACE {
IDENFR ans
ASSIGN =
IDENFR ans
PLUS +
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 2
RPARENT )
IDENFR ans
ASSIGN =
PLUS +
IDENFR ans
SEMICN ;
ELSETK else
IDENFR ans
ASSIGN =
MINU -
IDENFR ans
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
VOIDTK void
IDENFR checkArr
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR select
ASSIGN =
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
INTCON 3
PLUS +
INTCON 3
RPARENT )
MOD %
INTCON 3
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 0
RPARENT )
IDENFR printOne
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 1
RPARENT )
IDENFR printTwo
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 2
RPARENT )
IDENFR printThree
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR checkDouble
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR select
ASSIGN =
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
INTCON 3
PLUS +
INTCON 3
RPARENT )
MOD %
INTCON 3
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 0
RPARENT )
IDENFR printOne
LPARENT (
IDENFR calSum
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR total
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 1
RPARENT )
IDENFR printTwo
LPARENT (
IDENFR calSum
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR total
RPARENT )
COMMA ,
IDENFR calSum
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR total
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR select
EQL ==
INTCON 2
RPARENT )
IDENFR printThree
LPARENT (
IDENFR calSum
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR total
RPARENT )
COMMA ,
IDENFR calSum
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR total
RPARENT )
COMMA ,
IDENFR calSum
LPARENT (
IDENFR arr
LBRACK [
LPARENT (
IDENFR rand
LPARENT (
RPARENT )
MOD %
IDENFR total
PLUS +
IDENFR total
RPARENT )
MOD %
IDENFR total
RBRACK ]
COMMA ,
IDENFR total
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR bubbleSort
LPARENT (
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR total
RPARENT )
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR j
LSS <
IDENFR total
MINU -
IDENFR i
MINU -
INTCON 1
RPARENT )
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
IFTK if
LPARENT (
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR src
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
LBRACE {
INTTK int
IDENFR i
ASSIGN =
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR src
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
RBRACE }
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR j
LSS <
IDENFR total
MINU -
IDENFR i
MINU -
INTCON 1
RPARENT )
CONTINUETK continue
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR total
RPARENT )
CONTINUETK continue
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
VOIDTK void
IDENFR shellSort
LPARENT (
INTTK int
IDENFR total
RPARENT )
LBRACE {
INTTK int
IDENFR gap
ASSIGN =
IDENFR total
DIV /
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
IFTK if
LPARENT (
NOT !
IDENFR gap
RPARENT )
BREAKTK break
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
IDENFR gap
SEMICN ;
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
IFTK if
LPARENT (
IDENFR i
GEQ >=
IDENFR total
RPARENT )
BREAKTK break
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
IDENFR i
MINU -
IDENFR gap
SEMICN ;
WHILETK while
LPARENT (
INTCON 114514
RPARENT )
LBRACE {
LBRACE {
IFTK if
LPARENT (
IDENFR j
LSS <
INTCON 0
OR ||
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
LEQ <=
IDENFR src
LBRACK [
IDENFR j
PLUS +
IDENFR gap
RBRACK ]
RPARENT )
BREAKTK break
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR src
LBRACK [
IDENFR j
PLUS +
IDENFR gap
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR j
PLUS +
IDENFR gap
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
MINU -
IDENFR gap
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR gap
ASSIGN =
IDENFR gap
DIV /
INTCON 2
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
VOIDTK void
IDENFR merge
LPARENT (
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR mid
COMMA ,
INTTK int
IDENFR r
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
IDENFR l
COMMA ,
IDENFR j
ASSIGN =
IDENFR mid
PLUS +
INTCON 1
COMMA ,
IDENFR k
ASSIGN =
IDENFR l
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR r
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR buf
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR l
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR mid
OR ||
IDENFR j
LEQ <=
IDENFR r
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
IDENFR mid
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR src
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR buf
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR j
GRE >
IDENFR r
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR src
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR buf
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR buf
LBRACK [
IDENFR i
RBRACK ]
GRE >
IDENFR buf
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
LBRACE {
LBRACE {
RBRACE }
IDENFR src
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR buf
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
ELSETK else
LBRACE {
LBRACE {
RBRACE }
IDENFR src
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR buf
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
RBRACE }
VOIDTK void
IDENFR mergeSort
LPARENT (
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR r
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR l
GEQ >=
IDENFR r
RPARENT )
RETURNTK return
SEMICN ;
INTTK int
IDENFR mid
ASSIGN =
LPARENT (
IDENFR l
PLUS +
IDENFR r
RPARENT )
DIV /
INTCON 2
SEMICN ;
IDENFR mergeSort
LPARENT (
IDENFR l
COMMA ,
IDENFR mid
RPARENT )
SEMICN ;
IDENFR mergeSort
LPARENT (
IDENFR mid
PLUS +
INTCON 1
COMMA ,
IDENFR r
RPARENT )
SEMICN ;
IDENFR merge
LPARENT (
IDENFR l
COMMA ,
IDENFR mid
COMMA ,
IDENFR r
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR quickSort
LPARENT (
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR r
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR l
GRE >
IDENFR r
RPARENT )
RETURNTK return
SEMICN ;
INTTK int
IDENFR mid
ASSIGN =
LPARENT (
IDENFR l
PLUS +
IDENFR r
RPARENT )
DIV /
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
GRE >
IDENFR src
LBRACK [
IDENFR r
RBRACK ]
RPARENT )
LBRACE {
LBRACE {
RBRACE }
INTTK int
IDENFR k
ASSIGN =
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
ASSIGN =
IDENFR src
LBRACK [
IDENFR r
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR r
RBRACK ]
ASSIGN =
IDENFR k
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR src
LBRACK [
IDENFR r
RBRACK ]
LSS <
IDENFR src
LBRACK [
IDENFR mid
RBRACK ]
RPARENT )
LBRACE {
LBRACE {
RBRACE }
INTTK int
IDENFR k
ASSIGN =
IDENFR src
LBRACK [
IDENFR r
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
ASSIGN =
IDENFR src
LBRACK [
IDENFR mid
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR mid
RBRACK ]
ASSIGN =
IDENFR k
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
LSS <
IDENFR src
LBRACK [
IDENFR mid
RBRACK ]
RPARENT )
LBRACE {
LBRACE {
RBRACE }
INTTK int
IDENFR k
ASSIGN =
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
ASSIGN =
IDENFR src
LBRACK [
IDENFR mid
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR mid
RBRACK ]
ASSIGN =
IDENFR k
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
INTTK int
IDENFR i
ASSIGN =
IDENFR l
COMMA ,
IDENFR j
ASSIGN =
IDENFR r
COMMA ,
IDENFR tmp
ASSIGN =
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
NEQ !=
IDENFR j
RPARENT )
LBRACE {
LBRACE {
RBRACE }
WHILETK while
LPARENT (
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
GEQ >=
IDENFR tmp
AND &&
IDENFR i
LSS <
IDENFR j
RPARENT )
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
LEQ <=
IDENFR tmp
AND &&
IDENFR i
LSS <
IDENFR j
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
LBRACE {
RBRACE }
INTTK int
IDENFR k
ASSIGN =
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR k
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
LBRACE {
RBRACE }
RBRACE }
IDENFR src
LBRACK [
IDENFR l
RBRACK ]
ASSIGN =
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR tmp
SEMICN ;
IDENFR mid
ASSIGN =
IDENFR j
SEMICN ;
IDENFR j
ASSIGN =
IDENFR i
SEMICN ;
WHILETK while
LPARENT (
IDENFR src
LBRACK [
IDENFR i
RBRACK ]
EQL ==
IDENFR src
LBRACK [
IDENFR mid
RBRACK ]
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR src
LBRACK [
IDENFR j
RBRACK ]
EQL ==
IDENFR src
LBRACK [
IDENFR mid
RBRACK ]
RPARENT )
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IDENFR quickSort
LPARENT (
IDENFR l
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR quickSort
LPARENT (
IDENFR j
COMMA ,
IDENFR r
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR determinant
LPARENT (
INTTK int
IDENFR in
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
EQL ==
INTCON 1
RPARENT )
RETURNTK return
IDENFR in
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR tmp
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR n
MINU -
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
LSS <
IDENFR n
MINU -
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR k
LSS <
IDENFR i
RPARENT )
IDENFR tmp
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR in
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
SEMICN ;
ELSETK else
IDENFR tmp
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR in
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
LBRACK [
IDENFR k
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR l
ASSIGN =
IDENFR determinant
LPARENT (
IDENFR tmp
COMMA ,
IDENFR n
MINU -
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
MOD %
INTCON 2
RPARENT )
IDENFR ans
ASSIGN =
IDENFR ans
MINU -
IDENFR in
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR l
SEMICN ;
ELSETK else
IDENFR ans
ASSIGN =
IDENFR ans
PLUS +
IDENFR in
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR l
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR total
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR seed
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR total
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373354\n"
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
INTTK int
IDENFR demo1
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1686070451
COMMA ,
INTCON 580167200
COMMA ,
MINU -
INTCON 71727344
COMMA ,
INTCON 1790458882
COMMA ,
MINU -
INTCON 707294080
COMMA ,
INTCON 437522823
COMMA ,
MINU -
INTCON 354745685
COMMA ,
MINU -
INTCON 903788492
COMMA ,
MINU -
INTCON 853326395
COMMA ,
MINU -
INTCON 2045068380
RBRACE }
SEMICN ;
INTTK int
IDENFR demo2
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1919156834
COMMA ,
MINU -
INTCON 1000786109
COMMA ,
INTCON 1852757103
COMMA ,
INTCON 1966938780
COMMA ,
MINU -
INTCON 1198616081
COMMA ,
MINU -
INTCON 2118269519
COMMA ,
MINU -
INTCON 2070890619
COMMA ,
INTCON 1878585957
COMMA ,
INTCON 1457271300
COMMA ,
INTCON 828307086
RBRACE }
COMMA ,
LBRACE {
INTCON 1840937318
COMMA ,
INTCON 2091480844
COMMA ,
INTCON 459617059
COMMA ,
MINU -
INTCON 1837848014
COMMA ,
INTCON 932994868
COMMA ,
INTCON 199723542
COMMA ,
MINU -
INTCON 1678902097
COMMA ,
INTCON 460611448
COMMA ,
INTCON 572100277
COMMA ,
MINU -
INTCON 1607527460
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 744604366
COMMA ,
MINU -
INTCON 2044300164
COMMA ,
INTCON 1958063122
COMMA ,
INTCON 1148229092
COMMA ,
INTCON 840274257
COMMA ,
INTCON 969614164
COMMA ,
MINU -
INTCON 631737099
COMMA ,
INTCON 1127462504
COMMA ,
INTCON 2018161914
COMMA ,
INTCON 556766899
RBRACE }
COMMA ,
LBRACE {
INTCON 1861544443
COMMA ,
MINU -
INTCON 232935718
COMMA ,
MINU -
INTCON 1828379384
COMMA ,
MINU -
INTCON 1282922638
COMMA ,
INTCON 809442004
COMMA ,
MINU -
INTCON 65540968
COMMA ,
MINU -
INTCON 1068429160
COMMA ,
INTCON 1264461509
COMMA ,
MINU -
INTCON 2042849861
COMMA ,
INTCON 118226071
RBRACE }
COMMA ,
LBRACE {
INTCON 277629739
COMMA ,
INTCON 386521250
COMMA ,
MINU -
INTCON 821181987
COMMA ,
INTCON 929741622
COMMA ,
INTCON 727825736
COMMA ,
INTCON 1178454426
COMMA ,
INTCON 1874370738
COMMA ,
MINU -
INTCON 25464282
COMMA ,
MINU -
INTCON 1509655790
COMMA ,
MINU -
INTCON 1380518334
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1895096581
COMMA ,
MINU -
INTCON 1442451475
COMMA ,
MINU -
INTCON 480102141
COMMA ,
MINU -
INTCON 925000658
COMMA ,
INTCON 1440901658
COMMA ,
INTCON 925907631
COMMA ,
INTCON 550507243
COMMA ,
MINU -
INTCON 1102555955
COMMA ,
INTCON 1761734355
COMMA ,
MINU -
INTCON 248691452
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 585370257
COMMA ,
INTCON 1581421921
COMMA ,
INTCON 2032931954
COMMA ,
MINU -
INTCON 232837497
COMMA ,
MINU -
INTCON 361586023
COMMA ,
INTCON 1180399945
COMMA ,
MINU -
INTCON 940248727
COMMA ,
INTCON 1175495179
COMMA ,
MINU -
INTCON 2002866570
COMMA ,
INTCON 1444260543
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1115441947
COMMA ,
MINU -
INTCON 1999355682
COMMA ,
INTCON 986897468
COMMA ,
MINU -
INTCON 646376841
COMMA ,
INTCON 1528095330
COMMA ,
INTCON 113845900
COMMA ,
INTCON 1886450727
COMMA ,
INTCON 257617693
COMMA ,
INTCON 617641447
COMMA ,
INTCON 2108323588
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1511698150
COMMA ,
MINU -
INTCON 934377428
COMMA ,
INTCON 1685574582
COMMA ,
MINU -
INTCON 146587647
COMMA ,
MINU -
INTCON 701324057
COMMA ,
INTCON 243164633
COMMA ,
INTCON 765474257
COMMA ,
INTCON 1644349516
COMMA ,
INTCON 872868955
COMMA ,
MINU -
INTCON 1652887731
RBRACE }
COMMA ,
LBRACE {
INTCON 1476073729
COMMA ,
MINU -
INTCON 299222375
COMMA ,
MINU -
INTCON 1205701938
COMMA ,
INTCON 302771914
COMMA ,
MINU -
INTCON 1986235546
COMMA ,
INTCON 1861009141
COMMA ,
MINU -
INTCON 1098803687
COMMA ,
MINU -
INTCON 1370104357
COMMA ,
MINU -
INTCON 1104419163
COMMA ,
MINU -
INTCON 1293373514
RBRACE }
RBRACE }
SEMICN ;
IDENFR checkArr
LPARENT (
IDENFR demo1
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR checkDouble
LPARENT (
IDENFR demo2
COMMA ,
INTCON 5
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR initArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR bubbleSort
LPARENT (
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR checkArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR initArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR shellSort
LPARENT (
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR checkArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR initArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR mergeSort
LPARENT (
INTCON 0
COMMA ,
IDENFR total
MINU -
INTCON 1
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR checkArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR initArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR quickSort
LPARENT (
INTCON 0
COMMA ,
IDENFR total
MINU -
INTCON 1
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR checkArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR initArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR shellSort
LPARENT (
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR checkArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR initArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR mergeSort
LPARENT (
INTCON 0
COMMA ,
IDENFR total
MINU -
INTCON 1
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR checkArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR initArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR quickSort
LPARENT (
INTCON 0
COMMA ,
IDENFR total
MINU -
INTCON 1
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR checkArr
LPARENT (
IDENFR src
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR total
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
IDENFR initDouble
LPARENT (
IDENFR matrix
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR determinant
LPARENT (
IDENFR matrix
COMMA ,
IDENFR total
RPARENT )
RPARENT )
SEMICN ;
IDENFR checkDouble
LPARENT (
IDENFR matrix
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
IDENFR initDouble
LPARENT (
IDENFR matrix
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR determinant
LPARENT (
IDENFR matrix
COMMA ,
IDENFR total
RPARENT )
RPARENT )
SEMICN ;
IDENFR checkDouble
LPARENT (
IDENFR matrix
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
