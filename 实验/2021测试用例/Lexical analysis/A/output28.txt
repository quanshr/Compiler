CONSTTK const
INTTK int
IDENFR eye
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
COMMA ,
IDENFR D
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR base
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR va
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR vb
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
COMMA ,
IDENFR vc
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
IDENFR vd
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR badname
SEMICN ;
INTTK int
IDENFR vdot
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR y
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR d
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR useless
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
OR ||
INTCON 0
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR x
LBRACK [
IDENFR d
RBRACK ]
MULT *
IDENFR y
LBRACK [
IDENFR d
RBRACK ]
DIV /
INTCON 1
SEMICN ;
IDENFR useless
ASSIGN =
IDENFR sum
MOD %
INTCON 2
MINU -
INTCON 3
SEMICN ;
IDENFR d
ASSIGN =
IDENFR d
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR d
EQL ==
IDENFR D
OR ||
INTCON 0
AND &&
NOT !
MINU -
IDENFR sum
LSS <
INTCON 7
PLUS +
INTCON 1
OR ||
PLUS +
IDENFR sum
GRE >
INTCON 8
MINU -
INTCON 1
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
IFTK if
LPARENT (
INTCON 1
RPARENT )
CONTINUETK continue
SEMICN ;
ELSETK else
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_id
LPARENT (
INTTK int
IDENFR id
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR id
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 4
GRE >
INTCON 5
RPARENT )
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_vec
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d %d %d\n"
COMMA ,
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR x
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR x
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR uselessfunc
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
MINU -
INTCON 5
MOD %
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 3
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print_mat
LPARENT (
INTTK int
IDENFR m
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR dt
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR print_vec
LPARENT (
IDENFR m
LBRACK [
IDENFR dt
RBRACK ]
RPARENT )
SEMICN ;
IDENFR dt
ASSIGN =
IDENFR dt
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR dt
LSS <
INTCON 3
AND &&
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
INTCON 1
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
LBRACE {
RBRACE }
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR print_id
LPARENT (
INTCON 19373311
RPARENT )
SEMICN ;
INTTK int
IDENFR d1
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR d1
NEQ !=
IDENFR D
OR ||
IDENFR d1
LSS <
IDENFR D
RPARENT )
LBRACE {
INTTK int
IDENFR d2
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR d2
LEQ <=
IDENFR D
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR va
LBRACK [
IDENFR d1
RBRACK ]
LBRACK [
IDENFR d2
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR d2
ASSIGN =
IDENFR d2
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR d1
ASSIGN =
IDENFR d1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR cd
ASSIGN =
INTCON 5
SEMICN ;
WHILETK while
LPARENT (
IDENFR cd
RPARENT )
LBRACE {
IDENFR cd
ASSIGN =
IDENFR cd
MINU -
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "123\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR print_vec
LPARENT (
IDENFR vc
RPARENT )
SEMICN ;
INTTK int
IDENFR ans
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR vdot
LPARENT (
IDENFR va
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR vc
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR ans
RPARENT )
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR vdot
LPARENT (
IDENFR va
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR vb
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR ans
RPARENT )
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR vdot
LPARENT (
IDENFR va
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR vb
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR ans
RPARENT )
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR vdot
LPARENT (
IDENFR va
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR vb
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR ans
RPARENT )
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR vdot
LPARENT (
IDENFR va
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR vb
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR ans
RPARENT )
SEMICN ;
IDENFR print_mat
LPARENT (
IDENFR vb
RPARENT )
SEMICN ;
IDENFR uselessfunc
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
