INTTK int
IDENFR score
LBRACK [
INTCON 100
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR ave
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
CONSTTK const
INTTK int
IDENFR MOD
ASSIGN =
LPARENT (
INTCON 4259
PLUS +
INTCON 235
MULT *
INTCON 243
DIV /
INTCON 3
PLUS +
INTCON 3
MULT *
INTCON 4
MULT *
INTCON 4
MULT *
INTCON 3
MULT *
INTCON 6
MULT *
INTCON 5
DIV /
INTCON 3
MULT *
INTCON 9293
PLUS +
INTCON 385
MULT *
INTCON 4346
PLUS +
INTCON 23643
MULT *
INTCON 139
PLUS +
INTCON 1926
PLUS +
INTCON 817
PLUS +
INTCON 1952
PLUS +
INTCON 1026
PLUS +
INTCON 2869
RPARENT )
SEMICN ;
INTTK int
IDENFR comp_times
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR compare
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IDENFR comp_times
ASSIGN =
IDENFR comp_times
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
IDENFR y
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR x
LSS <
IDENFR y
RPARENT )
RETURNTK return
INTCON 1
SEMICN ;
ELSETK else
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
MINU -
INTCON 2333
SEMICN ;
RBRACE }
INTTK int
IDENFR calc_ave
LPARENT (
INTTK int
IDENFR i
COMMA ,
INTTK int
IDENFR m
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
SEMICN ;
IDENFR sum
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
MINU -
LPARENT (
INTCON 1
MINU -
MINU -
INTCON 1
RPARENT )
SEMICN ;
INTTK int
IDENFR max1
COMMA ,
IDENFR max2
COMMA ,
IDENFR min1
COMMA ,
IDENFR min2
SEMICN ;
IDENFR max1
ASSIGN =
INTCON 0
SEMICN ;
IDENFR max2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR min1
ASSIGN =
INTCON 2147483647
SEMICN ;
IDENFR min2
ASSIGN =
INTCON 2147483647
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR m
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
GEQ >=
IDENFR max1
RPARENT )
LBRACE {
IDENFR max2
ASSIGN =
IDENFR max1
SEMICN ;
IDENFR max1
ASSIGN =
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
GEQ >=
IDENFR max2
RPARENT )
IDENFR max2
ASSIGN =
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
LEQ <=
IDENFR min1
RPARENT )
LBRACE {
IDENFR min2
ASSIGN =
IDENFR min1
SEMICN ;
IDENFR min1
ASSIGN =
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
LEQ <=
IDENFR min2
RPARENT )
LBRACE {
IDENFR min2
ASSIGN =
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
RBRACE }
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR sum
ASSIGN =
IDENFR sum
MINU -
LPARENT (
IDENFR max1
PLUS +
IDENFR max2
PLUS +
IDENFR min1
PLUS +
IDENFR min2
RPARENT )
SEMICN ;
RETURNTK return
IDENFR sum
DIV /
LPARENT (
IDENFR m
MINU -
INTCON 4
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR display_array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR r
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "[ "
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
IDENFR l
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR r
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
PLUS +
IDENFR i
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "]\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR merge_sort
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR l
COMMA ,
INTTK int
IDENFR r
COMMA ,
INTTK int
IDENFR tmp
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR l
GEQ >=
IDENFR r
RPARENT )
RETURNTK return
SEMICN ;
INTTK int
IDENFR mid
ASSIGN =
IDENFR l
PLUS +
LPARENT (
IDENFR r
MINU -
IDENFR l
RPARENT )
DIV /
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "merge: (%d, %d) mid = %d\n"
COMMA ,
IDENFR l
COMMA ,
IDENFR r
COMMA ,
IDENFR mid
RPARENT )
SEMICN ;
IDENFR merge_sort
LPARENT (
IDENFR a
COMMA ,
IDENFR l
COMMA ,
IDENFR mid
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
IDENFR merge_sort
LPARENT (
IDENFR a
COMMA ,
IDENFR mid
PLUS +
INTCON 1
COMMA ,
IDENFR r
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
IDENFR l
COMMA ,
IDENFR j
ASSIGN =
IDENFR mid
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR k
ASSIGN =
IDENFR l
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR mid
AND &&
IDENFR j
LEQ <=
IDENFR r
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR compare
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR tmp
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR mid
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR j
LEQ <=
IDENFR r
RPARENT )
LBRACE {
IDENFR tmp
LBRACK [
IDENFR k
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR l
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR k
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR tmp
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR display_array
LPARENT (
IDENFR a
COMMA ,
IDENFR l
COMMA ,
IDENFR r
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR sort_ave
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
IDENFR merge_sort
LPARENT (
IDENFR a
COMMA ,
INTCON 0
COMMA ,
IDENFR n
MINU -
INTCON 1
COMMA ,
IDENFR tmp
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "18375354\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Input n and m: \n"
RPARENT )
SEMICN ;
INTTK int
IDENFR n
ASSIGN =
INTCON 9999
COMMA ,
IDENFR m
ASSIGN =
INTCON 2333
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR n
LSS <
INTCON 1
OR ||
IDENFR n
GRE >
INTCON 100
OR ||
IDENFR m
LSS <
INTCON 5
OR ||
IDENFR m
GRE >
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Wrong input range!\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR m
RPARENT )
LBRACE {
IDENFR score
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR n
GEQ >=
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR ave
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR calc_ave
LPARENT (
IDENFR i
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "average [%d] is %d\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR ave
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 1
PLUS +
IDENFR i
SEMICN ;
IDENFR i
ASSIGN =
IDENFR j
SEMICN ;
RBRACE }
IDENFR sort_ave
LPARENT (
IDENFR ave
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
INTTK int
IDENFR total
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR total
ASSIGN =
IDENFR total
PLUS +
IDENFR ave
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR total
ASSIGN =
IDENFR total
MOD %
IDENFR MOD
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Score of rank %d is %d.\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR ave
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 1
PLUS +
IDENFR i
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Total sum = %d\n"
COMMA ,
IDENFR total
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
