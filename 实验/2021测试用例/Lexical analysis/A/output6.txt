CONSTTK const
INTTK int
IDENFR sb
ASSIGN =
INTCON 250
SEMICN ;
CONSTTK const
INTTK int
IDENFR mmm
ASSIGN =
INTCON 2
COMMA ,
IDENFR nnn
ASSIGN =
INTCON 3
COMMA ,
IDENFR jjj
ASSIGN =
INTCON 4
COMMA ,
IDENFR kkk
ASSIGN =
INTCON 2
MULT *
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR arr1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 5
RBRACE }
COMMA ,
IDENFR arr2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR funcExp
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
COMMA ,
IDENFR d
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
OR ||
IDENFR c
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
AND &&
IDENFR c
EQL ==
IDENFR b
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR c
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR c
AND &&
IDENFR a
EQL ==
IDENFR b
OR ||
IDENFR a
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LSS <
IDENFR b
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LEQ <=
IDENFR c
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
IDENFR c
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
IDENFR c
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
IDENFR c
ASSIGN =
IDENFR a
DIV /
IDENFR b
SEMICN ;
IDENFR c
ASSIGN =
IDENFR a
MINU -
IDENFR b
SEMICN ;
IDENFR c
ASSIGN =
IDENFR a
MOD %
IDENFR b
SEMICN ;
IDENFR c
ASSIGN =
IDENFR a
MULT *
IDENFR b
SEMICN ;
IDENFR c
ASSIGN =
IDENFR a
SEMICN ;
IDENFR c
ASSIGN =
PLUS +
IDENFR a
SEMICN ;
IDENFR c
ASSIGN =
MINU -
IDENFR a
SEMICN ;
RETURNTK return
IDENFR c
SEMICN ;
RBRACE }
INTTK int
IDENFR func0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR fun4
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func5
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
SEMICN ;
INTTK int
IDENFR a1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 2
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR a3
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR a4
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR func0
LPARENT (
RPARENT )
RPARENT )
LBRACE {
SEMICN ;
INTCON 3
MULT *
INTCON 3
SEMICN ;
RBRACE }
IDENFR a3
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a4
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR a
ASSIGN =
IDENFR func5
LPARENT (
IDENFR a1
COMMA ,
IDENFR a2
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR func1
LPARENT (
IDENFR a3
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR arr3
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 2
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 4
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 5
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a
ASSIGN =
INTCON 6
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR a
LSS <
INTCON 8
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 6
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR sb
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR func1
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR func2
LPARENT (
IDENFR a
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
IDENFR sb
PLUS +
IDENFR mmm
SEMICN ;
IDENFR a
ASSIGN =
IDENFR b
MULT *
IDENFR sb
SEMICN ;
IDENFR a
ASSIGN =
IDENFR b
DIV /
IDENFR sb
SEMICN ;
IDENFR a
ASSIGN =
IDENFR sb
MOD %
IDENFR b
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
IDENFR sb
SEMICN ;
IDENFR a
ASSIGN =
MINU -
IDENFR sb
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
PLUS +
IDENFR sb
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
MINU -
IDENFR sb
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231248\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
