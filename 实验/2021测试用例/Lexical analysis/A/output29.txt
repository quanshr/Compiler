CONSTTK const
INTTK int
IDENFR const55
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
COMMA ,
INTCON 10
RBRACE }
COMMA ,
LBRACE {
INTCON 9
COMMA ,
INTCON 10
COMMA ,
INTCON 11
COMMA ,
INTCON 12
COMMA ,
INTCON 13
RBRACE }
COMMA ,
LBRACE {
INTCON 12
COMMA ,
INTCON 13
COMMA ,
INTCON 14
COMMA ,
INTCON 15
COMMA ,
INTCON 16
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const5
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 5
COMMA ,
INTCON 10
COMMA ,
INTCON 15
COMMA ,
INTCON 20
COMMA ,
INTCON 25
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR zero
ASSIGN =
INTCON 0
COMMA ,
IDENFR one
ASSIGN =
INTCON 1
COMMA ,
IDENFR two
ASSIGN =
INTCON 2
COMMA ,
IDENFR three
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR size
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR n22
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 5
RBRACE }
COMMA ,
LBRACE {
INTCON 561
COMMA ,
INTCON 5648
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR n3
LBRACK [
INTCON 3
PLUS +
INTCON 0
MULT *
INTCON 0
RBRACK ]
ASSIGN =
LBRACE {
INTCON 231
COMMA ,
INTCON 546
COMMA ,
INTCON 48651
RBRACE }
SEMICN ;
INTTK int
IDENFR var5
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR var33
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR d
SEMICN ;
INTTK int
IDENFR getSqu
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
IDENFR x
MULT *
IDENFR x
SEMICN ;
RBRACE }
VOIDTK void
IDENFR set1N3
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
LBRACE {
IDENFR n3
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR getSum
LPARENT (
INTTK int
IDENFR n
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR size0
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR size0
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR n
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
MINU -
LPARENT (
MINU -
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR getMax
LPARENT (
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR p
COMMA ,
INTTK int
IDENFR q
RPARENT )
LBRACE {
INTTK int
IDENFR max
ASSIGN =
IDENFR m
SEMICN ;
IFTK if
LPARENT (
IDENFR n
GRE >
IDENFR max
AND &&
INTCON 1
EQL ==
INTCON 1
AND &&
INTCON 1
OR ||
INTCON 0
NEQ !=
INTCON 0
AND &&
INTCON 0
OR ||
INTCON 114514
LEQ <=
INTCON 5438
DIV /
INTCON 2
RPARENT )
LBRACE {
IDENFR max
ASSIGN =
IDENFR n
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR p
GRE >
IDENFR max
AND &&
INTCON 3
GEQ >=
INTCON 5
MOD %
INTCON 2
OR ||
NOT !
LPARENT (
INTCON 1
PLUS +
INTCON 2
MULT *
INTCON 52
RPARENT )
RPARENT )
LBRACE {
IDENFR max
ASSIGN =
IDENFR p
SEMICN ;
RBRACE }
ELSETK else
IDENFR max
ASSIGN =
IDENFR max
SEMICN ;
IFTK if
LPARENT (
IDENFR q
GRE >
IDENFR max
OR ||
INTCON 0
OR ||
IDENFR max
EQL ==
IDENFR max
AND &&
IDENFR max
EQL ==
MINU -
IDENFR max
AND &&
INTCON 0
OR ||
INTCON 1
PLUS +
INTCON 1
GRE >
INTCON 23
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR max
ASSIGN =
IDENFR q
SEMICN ;
RBRACE }
RETURNTK return
IDENFR max
SEMICN ;
RBRACE }
INTTK int
IDENFR getSquSum
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR size
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR size
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR getSqu
LPARENT (
IDENFR x
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR constInMain
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR p
COMMA ,
IDENFR q
SEMICN ;
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR p
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR q
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373330\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "max of mnpq is %d\n"
COMMA ,
IDENFR getMax
LPARENT (
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR p
COMMA ,
IDENFR q
RPARENT )
RPARENT )
SEMICN ;
INTTK int
IDENFR max
ASSIGN =
IDENFR getMax
LPARENT (
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR p
COMMA ,
IDENFR q
RPARENT )
SEMICN ;
INTTK int
IDENFR temp
SEMICN ;
IDENFR set1N3
LPARENT (
RPARENT )
SEMICN ;
LBRACE {
LBRACE {
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR m
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
INTTK int
IDENFR out1
ASSIGN =
IDENFR getMax
LPARENT (
IDENFR i
COMMA ,
IDENFR n
COMMA ,
INTCON 0
COMMA ,
MINU -
INTCON 114514
RPARENT )
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR out1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "i or m ? %d\n"
COMMA ,
IDENFR out1
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR out2
ASSIGN =
LPARENT (
INTCON 543
MINU -
INTCON 543
PLUS +
INTCON 2
MINU -
INTCON 2
RPARENT )
DIV /
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
LPARENT (
INTCON 54482261
MINU -
INTCON 444561
RPARENT )
MULT *
INTCON 0
DIV /
INTCON 521135
MOD %
INTCON 6371
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 2
RPARENT )
CONTINUETK continue
SEMICN ;
ELSETK else
IDENFR out2
ASSIGN =
IDENFR out2
PLUS +
IDENFR n3
LBRACK [
IDENFR i
RBRACK ]
MULT *
INTCON 8
MINU -
INTCON 0
SEMICN ;
IDENFR out2
ASSIGN =
IDENFR out2
PLUS +
INTCON 114514
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "out1 %d out2 %d\n"
COMMA ,
IDENFR temp
COMMA ,
IDENFR out2
RPARENT )
SEMICN ;
IDENFR var33
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 9
MULT *
INTCON 8
DIV /
INTCON 7
MINU -
INTCON 6
PLUS +
INTCON 5
MOD %
INTCON 4
SEMICN ;
IDENFR var33
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LPARENT (
INTCON 1
RPARENT )
PLUS +
INTCON 5
DIV /
LPARENT (
INTCON 2
RPARENT )
MULT *
LPARENT (
INTCON 6
MINU -
INTCON 2
MULT *
INTCON 5
MOD %
INTCON 4
RPARENT )
MINU -
LPARENT (
INTCON 5
MULT *
INTCON 4
RPARENT )
SEMICN ;
IDENFR var33
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LPARENT (
LPARENT (
IDENFR getMax
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RPARENT )
RPARENT )
PLUS +
LPARENT (
IDENFR var33
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MINU -
INTCON 5
DIV /
INTCON 6
RPARENT )
PLUS +
LPARENT (
INTCON 648648
MOD %
INTCON 2
RPARENT )
RPARENT )
MULT *
LPARENT (
LPARENT (
IDENFR m
PLUS +
IDENFR n
MINU -
INTCON 2
MULT *
INTCON 1
RPARENT )
PLUS +
LPARENT (
INTCON 44
RPARENT )
MINU -
LPARENT (
INTCON 0
PLUS +
INTCON 0
RPARENT )
RPARENT )
SEMICN ;
IDENFR var33
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 114514
PLUS +
IDENFR zero
MINU -
IDENFR zero
MULT *
IDENFR zero
SEMICN ;
INTTK int
IDENFR sumVar33
ASSIGN =
IDENFR getSum
LPARENT (
IDENFR var33
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "sum of array var33 is %d\n"
COMMA ,
IDENFR sumVar33
RPARENT )
SEMICN ;
INTTK int
IDENFR out3
SEMICN ;
IDENFR out3
ASSIGN =
IDENFR getSquSum
LPARENT (
IDENFR n3
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "squ sum of s3 %d\n"
COMMA ,
IDENFR out3
RPARENT )
SEMICN ;
INTTK int
IDENFR out4
ASSIGN =
IDENFR out3
PLUS +
IDENFR constInMain
SEMICN ;
IDENFR out4
ASSIGN =
IDENFR getMax
LPARENT (
IDENFR getSquSum
LPARENT (
IDENFR n3
COMMA ,
INTCON 3
RPARENT )
COMMA ,
IDENFR getSqu
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
COMMA ,
INTCON 5
MULT *
INTCON 8
COMMA ,
IDENFR getSqu
LPARENT (
IDENFR n22
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "max of four number %d\n"
COMMA ,
IDENFR out4
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
LPARENT (
PLUS +
INTCON 5438
MINU -
INTCON 2
RPARENT )
GEQ >=
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "i don t want this\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Kirov reporrrting %d\n"
COMMA ,
IDENFR constInMain
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR out5
SEMICN ;
LBRACE {
IDENFR out5
ASSIGN =
IDENFR constInMain
PLUS +
INTCON 5
SEMICN ;
IDENFR out5
ASSIGN =
IDENFR out5
PLUS +
IDENFR getMax
LPARENT (
INTCON 1
COMMA ,
MINU -
INTCON 231
COMMA ,
MINU -
INTCON 156
MULT *
INTCON 156
COMMA ,
MINU -
INTCON 123
DIV /
INTCON 3501
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
LPARENT (
LPARENT (
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
RPARENT )
RPARENT )
RPARENT )
LBRACE {
IDENFR out5
ASSIGN =
INTCON 32132132
SEMICN ;
RBRACE }
RBRACE }
LBRACE {
RBRACE }
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 2
GRE >
INTCON 1
RPARENT )
SEMICN ;
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "For the Union %d\n"
COMMA ,
IDENFR out5
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "okmotherfuckeroveridontwanttobehornyanymoreijustwanttobehappy\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
