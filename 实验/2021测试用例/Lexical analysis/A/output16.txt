CONSTTK const
INTTK int
IDENFR Mod
ASSIGN =
INTCON 10007
SEMICN ;
CONSTTK const
INTTK int
IDENFR dx
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR dy
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR Map
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR strP
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR ans
COMMA ,
IDENFR base
SEMICN ;
INTTK int
IDENFR val
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR CalcMod
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
IDENFR x
MINU -
IDENFR x
DIV /
IDENFR Mod
MULT *
IDENFR Mod
SEMICN ;
RBRACE }
INTTK int
IDENFR Check
LPARENT (
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR y
GEQ >=
INTCON 0
AND &&
IDENFR y
LSS <
INTCON 5
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR check
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 0
GRE >
IDENFR x
OR ||
INTCON 5
LEQ <=
IDENFR x
OR ||
NOT !
IDENFR Check
LPARENT (
IDENFR y
RPARENT )
RPARENT )
RETURNTK return
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR Map
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
RETURNTK return
INTCON 0
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR dfs
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
COMMA ,
INTTK int
IDENFR base
COMMA ,
INTTK int
IDENFR height
LBRACK [
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR val
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
IDENFR val
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
ASSIGN =
IDENFR CalcMod
LPARENT (
IDENFR base
MULT *
IDENFR height
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
MOD %
IDENFR Mod
PLUS +
IDENFR Mod
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR val
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
EQL ==
INTCON 0
RPARENT )
IDENFR val
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR t1
ASSIGN =
INTCON 0
COMMA ,
IDENFR t2
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR check
LPARENT (
IDENFR x
PLUS +
IDENFR dx
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR y
PLUS +
IDENFR dy
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
LBRACE {
IDENFR dfs
LPARENT (
IDENFR x
PLUS +
IDENFR dx
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR y
PLUS +
IDENFR dy
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
COMMA ,
IDENFR height
RPARENT )
SEMICN ;
IDENFR t1
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR check
LPARENT (
IDENFR x
PLUS +
IDENFR dx
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR y
PLUS +
IDENFR dy
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
RPARENT )
LBRACE {
IDENFR dfs
LPARENT (
IDENFR x
PLUS +
IDENFR dx
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR y
PLUS +
IDENFR dy
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
COMMA ,
IDENFR height
RPARENT )
SEMICN ;
IDENFR t2
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR t1
NEQ !=
INTCON 0
OR ||
IDENFR t2
NEQ !=
INTCON 0
RPARENT )
RETURNTK return
SEMICN ;
IDENFR val
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR y
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373459\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
SEMICN ;
INTTK int
IDENFR height
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 5
RPARENT )
LBRACE {
IDENFR height
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR strP
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR base
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR dfs
LPARENT (
IDENFR strP
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR strP
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR base
COMMA ,
IDENFR height
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "val20: %d, val21:%d, val22:%d, val23:%d, val24:%d\n"
COMMA ,
IDENFR val
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "val30: %d, val32: %d, val34: %d\n"
COMMA ,
IDENFR val
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "val40: %d, val42:%d, val43:%d, val44:%d\n"
COMMA ,
IDENFR val
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR val
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
