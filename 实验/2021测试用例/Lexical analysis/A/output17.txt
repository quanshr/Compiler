CONSTTK const
INTTK int
IDENFR hehe
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 5
COMMA ,
INTCON 10
COMMA ,
INTCON 20
COMMA ,
INTCON 50
COMMA ,
INTCON 100
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 5
COMMA ,
INTCON 10
COMMA ,
INTCON 20
COMMA ,
INTCON 50
COMMA ,
INTCON 100
COMMA ,
INTCON 200
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR min
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
GRE >
IDENFR b
RPARENT )
RETURNTK return
IDENFR b
SEMICN ;
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR inner1
LPARENT (
INTTK int
IDENFR dp
LBRACK [
RBRACK ]
LBRACK [
INTCON 501
RBRACK ]
COMMA ,
INTTK int
IDENFR target
COMMA ,
INTTK int
IDENFR size
COMMA ,
INTTK int
IDENFR num
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
COMMA ,
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR size
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LEQ <=
IDENFR target
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
LSS <
IDENFR num
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
LBRACE {
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR dp
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR j
EQL ==
IDENFR num
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
LBRACE {
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR dp
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
NEQ !=
INTCON 0
AND &&
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
MINU -
IDENFR num
LBRACK [
IDENFR i
RBRACK ]
RBRACK ]
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR min
LPARENT (
IDENFR dp
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
COMMA ,
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
MINU -
IDENFR num
LBRACK [
IDENFR i
RBRACK ]
RBRACK ]
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR dp
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
NEQ !=
INTCON 0
RPARENT )
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR dp
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
ELSETK else
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
MINU -
IDENFR num
LBRACK [
IDENFR i
RBRACK ]
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR dp
LBRACK [
IDENFR size
MINU -
INTCON 1
RBRACK ]
LBRACK [
IDENFR target
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR smallmoney
LPARENT (
INTTK int
IDENFR num
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR target
COMMA ,
INTTK int
IDENFR size
RPARENT )
LBRACE {
INTTK int
IDENFR dp
LBRACK [
INTCON 11
RBRACK ]
LBRACK [
INTCON 501
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
COMMA ,
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
IDENFR dp
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
IDENFR target
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
MOD %
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR dp
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
DIV /
IDENFR num
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR dp
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR size
RPARENT )
LBRACE {
IDENFR dp
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR inner1
LPARENT (
IDENFR dp
COMMA ,
IDENFR target
COMMA ,
IDENFR size
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR nums
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 5
COMMA ,
INTCON 10
COMMA ,
INTCON 20
COMMA ,
INTCON 50
COMMA ,
INTCON 100
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 5
COMMA ,
INTCON 10
COMMA ,
INTCON 20
COMMA ,
INTCON 50
COMMA ,
INTCON 100
COMMA ,
INTCON 200
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR size
ASSIGN =
INTCON 9
COMMA ,
IDENFR max
ASSIGN =
INTCON 501
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373487\n"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR size
RPARENT )
LBRACE {
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR n
GEQ >=
IDENFR max
OR ||
IDENFR n
LSS <
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "out of range!!\n"
RPARENT )
SEMICN ;
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "the result is:%d\n"
COMMA ,
IDENFR smallmoney
LPARENT (
IDENFR nums
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR n
COMMA ,
INTCON 7
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
