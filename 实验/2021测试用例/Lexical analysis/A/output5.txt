INTTK int
IDENFR global_array
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR addIndex
LPARENT (
INTTK int
IDENFR i
COMMA ,
INTTK int
IDENFR array
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a0
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a0
AND &&
IDENFR a1
RPARENT )
IDENFR global_array
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a0
AND &&
IDENFR a1
RPARENT )
IDENFR global_array
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
ELSETK else
IDENFR global_array
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a1
AND &&
IDENFR a0
RPARENT )
IDENFR global_array
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
ELSETK else
IDENFR global_array
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 5
AND &&
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
MULT *
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 5
RPARENT )
LBRACE {
IDENFR global_array
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
INTCON 4
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR global_array
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a0
OR ||
IDENFR a1
RPARENT )
LBRACE {
IDENFR global_array
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
INTCON 5
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR global_array
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a0
OR ||
NOT !
IDENFR a1
RPARENT )
LBRACE {
IDENFR global_array
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IDENFR global_array
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
INTCON 6
SEMICN ;
WHILETK while
LPARENT (
INTCON 6
LSS <
INTCON 3
OR ||
INTCON 4
LEQ <=
INTCON 7
RPARENT )
LBRACE {
IDENFR global_array
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
INTCON 7
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR global_array
LBRACK [
INTCON 7
RBRACK ]
NEQ !=
INTCON 7
RPARENT )
LBRACE {
IDENFR global_array
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR tool
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
IDENFR addIndex
LPARENT (
INTCON 0
COMMA ,
IDENFR tool
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR tool
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
IDENFR global_array
LBRACK [
INTCON 8
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IDENFR global_array
LBRACK [
INTCON 8
RBRACK ]
ASSIGN =
INTCON 8
SEMICN ;
IFTK if
LPARENT (
INTCON 1
OR ||
IDENFR addIndex
LPARENT (
INTCON 1
COMMA ,
IDENFR tool
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR tool
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
IDENFR global_array
LBRACK [
INTCON 9
RBRACK ]
ASSIGN =
MINU -
INTCON 1
SEMICN ;
ELSETK else
IDENFR global_array
LBRACK [
INTCON 9
RBRACK ]
ASSIGN =
INTCON 9
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231011\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "start checking for logic expressions\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 5
AND &&
IDENFR global_array
LBRACK [
IDENFR i
RBRACK ]
EQL ==
IDENFR i
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "check for AND calculation: successfully!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "check for AND calculation: something wrong!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 8
AND &&
IDENFR global_array
LBRACK [
IDENFR i
RBRACK ]
EQL ==
IDENFR i
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 8
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "check for OR calculation: successfully!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "check for OR calculation: something wrong!\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 8
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
AND &&
IDENFR global_array
LBRACK [
IDENFR i
RBRACK ]
EQL ==
IDENFR i
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "check for short-circuit calculation: successfully!\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "check for short-circuit calculation: something wrong!\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "end checking\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
