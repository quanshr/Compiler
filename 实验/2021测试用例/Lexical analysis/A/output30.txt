CONSTTK const
INTTK int
IDENFR ca
ASSIGN =
INTCON 1
COMMA ,
IDENFR caa
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR cc
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR ce
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR aa
ASSIGN =
INTCON 1
COMMA ,
IDENFR aaa
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR ab
SEMICN ;
INTTK int
IDENFR ac
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR ad
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR ae
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR af
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
IDENFR a
MULT *
IDENFR b
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR c
PLUS +
IDENFR a
MULT *
IDENFR b
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
IDENFR d
DIV /
IDENFR c
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
IDENFR e
MOD %
IDENFR d
SEMICN ;
INTTK int
IDENFR g
ASSIGN =
IDENFR func1
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR h
ASSIGN =
IDENFR g
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR g
RPARENT )
IDENFR h
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
MINU -
IDENFR a
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
PLUS +
IDENFR b
SEMICN ;
INTTK int
IDENFR k
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR l
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR m
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR n
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
IDENFR c
ASSIGN =
IDENFR a
MINU -
IDENFR b
SEMICN ;
IDENFR g
ASSIGN =
IDENFR n
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR l
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
AND &&
IDENFR c
EQL ==
IDENFR d
RPARENT )
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
OR ||
IDENFR c
EQL ==
IDENFR d
RPARENT )
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
IDENFR f
ASSIGN =
IDENFR a
SEMICN ;
RETURNTK return
IDENFR f
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func5
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IDENFR func3
LPARENT (
IDENFR ad
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func6
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
IDENFR func5
LPARENT (
INTCON 12
COMMA ,
INTCON 13
RPARENT )
SEMICN ;
IDENFR func5
LPARENT (
IDENFR ce
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR ce
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func7
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 100
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 1
RPARENT )
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LEQ <=
INTCON 1
RPARENT )
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 1
RPARENT )
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LSS <
INTCON 1
RPARENT )
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
ELSETK else
IDENFR a
ASSIGN =
INTCON 3
SEMICN ;
IFTK if
LPARENT (
IDENFR a
NEQ !=
INTCON 1
RPARENT )
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
ELSETK else
IDENFR a
ASSIGN =
INTCON 3
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
EQL ==
INTCON 5
RPARENT )
IDENFR a
ASSIGN =
INTCON 4
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
EQL ==
INTCON 6
RPARENT )
BREAKTK break
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
EQL ==
INTCON 100
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func10
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373734"
RPARENT )
SEMICN ;
INTTK int
IDENFR number1
ASSIGN =
IDENFR func2
LPARENT (
INTCON 3
RPARENT )
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
LPARENT (
INTCON 12
PLUS +
INTCON 3
RPARENT )
SEMICN ;
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
