CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 10
COMMA ,
IDENFR c
ASSIGN =
INTCON 100
SEMICN ;
CONSTTK const
INTTK int
IDENFR A
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR B
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR p
ASSIGN =
INTCON 0
SEMICN ;
VOIDTK void
IDENFR Func5
LPARENT (
INTTK int
IDENFR g
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Func4
LPARENT (
INTTK int
IDENFR N
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Func4OK\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Func3
LPARENT (
INTTK int
IDENFR M
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Func3OK\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR Func2
LPARENT (
INTTK int
IDENFR z
RPARENT )
LBRACE {
IDENFR z
ASSIGN =
IDENFR z
MULT *
LPARENT (
IDENFR z
DIV /
IDENFR z
RPARENT )
MOD %
IDENFR z
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR z
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Func2OK\n"
RPARENT )
SEMICN ;
RETURNTK return
IDENFR z
SEMICN ;
RBRACE }
INTTK int
IDENFR Func1
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
NEQ !=
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR y
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "fb:%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
IDENFR x
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "sb:%d\n"
COMMA ,
IDENFR y
RPARENT )
SEMICN ;
RETURNTK return
IDENFR y
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Func1OK\n"
RPARENT )
SEMICN ;
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Func0
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
SEMICN ;
INTTK int
IDENFR C
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR D
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
OR ||
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR C
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "CscanfOK\n"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
NOT !
INTCON 1
RPARENT )
SEMICN ;
PLUS +
INTCON 8
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 1
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR D
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "DscanfOK\n"
RPARENT )
SEMICN ;
IDENFR m
ASSIGN =
IDENFR Func1
LPARENT (
IDENFR m
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR m
EQL ==
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "same\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
AND &&
IDENFR i
GRE >
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "continueOK\n"
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "continueGG\n"
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "breakOK\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "breakGG\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR Func2
LPARENT (
IDENFR i
RPARENT )
SEMICN ;
IDENFR Func3
LPARENT (
IDENFR C
RPARENT )
SEMICN ;
IDENFR Func4
LPARENT (
IDENFR D
RPARENT )
SEMICN ;
IDENFR Func5
LPARENT (
IDENFR C
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19182619\n"
RPARENT )
SEMICN ;
IDENFR Func0
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "end"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
