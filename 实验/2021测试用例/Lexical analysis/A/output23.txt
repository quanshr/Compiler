CONSTTK const
INTTK int
IDENFR global_const_var
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR glbal_var
SEMICN ;
INTTK int
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR g
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR g_var
SEMICN ;
IDENFR g_var
ASSIGN =
INTCON 3
SEMICN ;
RETURNTK return
IDENFR x
MULT *
IDENFR g_var
SEMICN ;
RBRACE }
VOIDTK void
IDENFR h
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR z
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR func_var1
SEMICN ;
IDENFR func_var1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "123456789\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR func_var1
RPARENT )
SEMICN ;
IDENFR func_var1
ASSIGN =
INTCON 1
PLUS +
INTCON 1
SEMICN ;
SEMICN ;
INTCON 3
SEMICN ;
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
CONTINUETK continue
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373421\n"
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_var1
ASSIGN =
INTCON 1
COMMA ,
IDENFR const_var2
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_array1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_array2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_array3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "const_var1+const_var2=:%d\n"
COMMA ,
IDENFR const_var1
PLUS +
IDENFR const_var2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "const_array1[1]=:%d\n"
COMMA ,
IDENFR const_array1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR var1
SEMICN ;
INTTK int
IDENFR var2
COMMA ,
IDENFR var3
SEMICN ;
INTTK int
IDENFR var4
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR array1
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR array2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
INTTK int
IDENFR array4
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR array5
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 3
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR array6
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 3
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "array2[0]:=%d\n"
COMMA ,
IDENFR array2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR var1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR array2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR array5
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR var1
SEMICN ;
INTCON 3
SEMICN ;
IDENFR f
LPARENT (
RPARENT )
SEMICN ;
IDENFR g
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "g(2):=%d\n"
COMMA ,
IDENFR g
LPARENT (
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
IDENFR h
LPARENT (
INTCON 1
COMMA ,
IDENFR array2
COMMA ,
IDENFR array6
RPARENT )
SEMICN ;
MINU -
INTCON 3
SEMICN ;
PLUS +
INTCON 3
SEMICN ;
IDENFR h
LPARENT (
INTCON 1
COMMA ,
IDENFR array6
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR array6
RPARENT )
SEMICN ;
INTCON 3
PLUS +
INTCON 3
MULT *
INTCON 3
PLUS +
INTCON 3
DIV /
INTCON 3
MINU -
INTCON 3
MOD %
INTCON 3
SEMICN ;
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
GRE >
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
GEQ >=
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
INTCON 1
RPARENT )
LBRACE {
RBRACE }
RBRACE }
RBRACE }
RBRACE }
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
EQL ==
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 3
NEQ !=
INTCON 4
RPARENT )
LBRACE {
RBRACE }
RBRACE }
RBRACE }
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 2
AND &&
INTCON 3
EQL ==
INTCON 3
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 2
OR ||
INTCON 3
EQL ==
INTCON 4
RPARENT )
LBRACE {
RBRACE }
RBRACE }
IDENFR func
LPARENT (
RPARENT )
SEMICN ;
IDENFR var1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR var2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n%d\n"
COMMA ,
IDENFR var1
PLUS +
IDENFR var2
COMMA ,
IDENFR var1
MULT *
IDENFR var2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "AK!!!"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
