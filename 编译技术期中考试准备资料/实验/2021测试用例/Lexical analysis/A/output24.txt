CONSTTK const
INTTK int
IDENFR global_const_A
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR global_const_B1
ASSIGN =
INTCON 11
COMMA ,
IDENFR global_const_B2
ASSIGN =
INTCON 12
SEMICN ;
CONSTTK const
INTTK int
IDENFR A
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR array_A
LBRACK [
LPARENT (
INTCON 1
PLUS +
INTCON 9
RPARENT )
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
COMMA ,
IDENFR A
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR array_D
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR B
LBRACK [
LPARENT (
INTCON 110
DIV /
INTCON 10
RPARENT )
RBRACK ]
COMMA ,
IDENFR AB
LBRACK [
PLUS +
INTCON 11
RBRACK ]
SEMICN ;
INTTK int
IDENFR global_var1
SEMICN ;
INTTK int
IDENFR global_var2
COMMA ,
IDENFR global_var3
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR array_D1
LBRACK [
INTCON 7
MOD %
INTCON 4
RBRACK ]
LBRACK [
INTCON 8
DIV /
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RBRACE }
COMMA ,
LBRACE {
INTCON 10
COMMA ,
INTCON 11
COMMA ,
INTCON 12
COMMA ,
INTCON 13
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR func_void
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR const_1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR var1
SEMICN ;
IDENFR global_var1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR global_var1
PLUS +
IDENFR global_var3
SEMICN ;
LBRACE {
IDENFR var1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR var1
ASSIGN =
IDENFR const_1
PLUS +
IDENFR var1
SEMICN ;
RBRACE }
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func_if_var
LPARENT (
INTTK int
IDENFR var
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR var
GRE >
INTCON 0
RPARENT )
IDENFR var
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR var
PLUS +
INTCON 1
LEQ <=
INTCON 1
RPARENT )
IDENFR var
ASSIGN =
INTCON 4
SEMICN ;
IFTK if
LPARENT (
IDENFR var
GEQ >=
INTCON 1
PLUS +
INTCON 1
RPARENT )
IDENFR var
ASSIGN =
INTCON 5
SEMICN ;
IFTK if
LPARENT (
MINU -
IDENFR var
PLUS +
IDENFR var
RPARENT )
IDENFR var
ASSIGN =
INTCON 6
SEMICN ;
IFTK if
LPARENT (
MINU -
IDENFR var
PLUS +
IDENFR var
EQL ==
INTCON 0
PLUS +
INTCON 1
RPARENT )
IDENFR var
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR var
GRE >
INTCON 1
NEQ !=
IDENFR var
LSS <
INTCON 1
RPARENT )
IDENFR var
ASSIGN =
INTCON 8
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR var
RPARENT )
IDENFR var
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR var
LSS <
INTCON 1
RPARENT )
LBRACE {
IDENFR var
ASSIGN =
MINU -
IDENFR var
SEMICN ;
RBRACE }
ELSETK else
SEMICN ;
RETURNTK return
IDENFR var
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func_null
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR func_if_D1array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR factor
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 0
RPARENT )
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
NEQ !=
INTCON 1
RPARENT )
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
GEQ >=
INTCON 2
RPARENT )
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 1
PLUS +
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
MOD %
IDENFR A
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 3
RBRACK ]
LEQ <=
INTCON 5
RPARENT )
IDENFR a
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 3
RBRACK ]
MULT *
MINU -
PLUS +
MINU -
PLUS +
MINU -
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
LSS <
INTCON 0
RPARENT )
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LPARENT (
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
PLUS +
INTCON 5
DIV /
INTCON 3
RPARENT )
MOD %
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
GRE >
INTCON 5
PLUS +
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
MOD %
LPARENT (
IDENFR a
LBRACK [
INTCON 3
RBRACK ]
MULT *
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 6
RBRACK ]
DIV /
INTCON 2
GRE >
INTCON 1
EQL ==
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
GRE >
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
IDENFR a
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
PLUS +
MINU -
LPARENT (
IDENFR a
LBRACK [
INTCON 6
RBRACK ]
DIV /
INTCON 9
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 7
RBRACK ]
RPARENT )
IDENFR a
LBRACK [
INTCON 7
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 7
RBRACK ]
DIV /
INTCON 2
SEMICN ;
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
PLUS +
LPARENT (
IDENFR a
LBRACK [
INTCON 3
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 5
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 6
RBRACK ]
RPARENT )
DIV /
IDENFR factor
SEMICN ;
RBRACE }
INTTK int
IDENFR func_test
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR i
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func_test_A
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR var1
ASSIGN =
INTCON 3
COMMA ,
IDENFR var2
ASSIGN =
INTCON 4
COMMA ,
IDENFR var3
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR var
LBRACK [
INTCON 12
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
IFTK if
LPARENT (
IDENFR var1
LSS <
INTCON 1
OR ||
IDENFR var1
GRE >
INTCON 3
RPARENT )
IDENFR var
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR var1
GRE >
INTCON 1
OR ||
IDENFR var1
LSS <
INTCON 3
RPARENT )
IDENFR var
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
ELSETK else
IDENFR var
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR var1
EQL ==
INTCON 3
AND &&
IDENFR var2
EQL ==
INTCON 4
RPARENT )
IDENFR var
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
ELSETK else
IDENFR var
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR var3
EQL ==
INTCON 3
AND &&
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var3
GEQ >=
INTCON 3
AND &&
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 4
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var3
EQL ==
INTCON 5
OR ||
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 5
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var3
LEQ <=
INTCON 3
OR ||
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 6
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var3
NEQ !=
INTCON 3
AND &&
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 7
RPARENT )
OR ||
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 8
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var3
NEQ !=
INTCON 5
OR ||
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 9
RPARENT )
AND &&
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 10
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR var1
OR ||
NOT !
IDENFR var2
OR ||
IDENFR var3
AND &&
IDENFR func_test
LPARENT (
IDENFR var
COMMA ,
INTCON 11
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Testing Short-circuit evaluation : %d %d %d %d %d %d %d %d %d %d %d %d\n"
COMMA ,
IDENFR var
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 4
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 6
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 7
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 8
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 9
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR var
LBRACK [
INTCON 11
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func_if_D2array
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR factor
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
EQL ==
INTCON 1
RPARENT )
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
NEQ !=
INTCON 1
RPARENT )
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
GEQ >=
INTCON 2
RPARENT )
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 1
PLUS +
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
MOD %
IDENFR A
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
LEQ <=
INTCON 5
RPARENT )
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
MINU -
PLUS +
MINU -
PLUS +
MINU -
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
LSS <
INTCON 0
RPARENT )
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
LPARENT (
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
INTCON 5
DIV /
INTCON 3
RPARENT )
MOD %
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
GRE >
INTCON 5
PLUS +
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
MOD %
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
DIV /
INTCON 2
GRE >
INTCON 1
EQL ==
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
GRE >
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
PLUS +
MINU -
LPARENT (
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
DIV /
INTCON 3
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
DIV /
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Testing func_if_D2array(a[][3], b) ......\n%d %d %d\n%d %d %d\n"
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func_while
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR m
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
IDENFR m
PLUS +
IDENFR n
COMMA ,
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
IDENFR n
RPARENT )
BREAKTK break
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
IDENFR n
PLUS +
INTCON 1
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR j
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func_pass_array
LPARENT (
INTTK int
IDENFR array
LBRACK [
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Testing func_pass_array(int a[][4) ......\n%d %d %d %d\n%d %d %d %d\n%d %d %d %d\n"
COMMA ,
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func_pass_PartArray
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Testing func_pass_PartArray(int a[]) ...... %d %d %d %d\n"
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func_pass_arrayElement
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Testing func_pass_arrayElement(int a) ...... %d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373235\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR var1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR mul
SEMICN ;
IDENFR func_test_A
LPARENT (
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_C1
ASSIGN =
IDENFR global_const_B1
COMMA ,
IDENFR const_C2
ASSIGN =
PLUS +
INTCON 12
COMMA ,
IDENFR const_C3
ASSIGN =
MINU -
IDENFR global_const_B2
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_D1
ASSIGN =
LPARENT (
PLUS +
MINU -
PLUS +
MINU -
PLUS +
MINU -
IDENFR const_C2
RPARENT )
MULT *
LPARENT (
IDENFR const_C2
DIV /
IDENFR global_const_A
RPARENT )
MOD %
LPARENT (
IDENFR global_const_B2
PLUS +
INTCON 1
RPARENT )
PLUS +
IDENFR global_const_B1
SEMICN ;
INTTK int
IDENFR var4
ASSIGN =
IDENFR global_var3
PLUS +
IDENFR const_D1
COMMA ,
IDENFR var5
COMMA ,
IDENFR var6
ASSIGN =
INTCON 1
PLUS +
INTCON 2
MULT *
INTCON 3
SEMICN ;
IDENFR mul
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR B
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR array_A
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR array_A
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR AB
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR mul
MULT *
IDENFR B
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR func_pass_array
LPARENT (
IDENFR array_D1
RPARENT )
SEMICN ;
IDENFR func_pass_PartArray
LPARENT (
IDENFR array_D1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR func_pass_arrayElement
LPARENT (
IDENFR array_D1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Testing complex calculate ...... result = %d.\n"
COMMA ,
MINU -
LPARENT (
LPARENT (
LPARENT (
PLUS +
MINU -
PLUS +
MINU -
IDENFR AB
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
PLUS +
IDENFR AB
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
MULT *
LPARENT (
IDENFR AB
LBRACK [
INTCON 3
RBRACK ]
MOD %
IDENFR AB
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
DIV /
IDENFR AB
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Testing D2array traversal and assignment.\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR array_E
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 2
RPARENT )
LBRACE {
IDENFR array_E
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
PLUS +
IDENFR j
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Array array_E:\n%d %d %d\n%d %d %d\n"
COMMA ,
IDENFR array_E
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array_E
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR array_E
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR array_E
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR array_E
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR array_E
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IDENFR func_void
LPARENT (
RPARENT )
SEMICN ;
IDENFR var5
ASSIGN =
IDENFR func_if_var
LPARENT (
IDENFR const_C1
RPARENT )
SEMICN ;
INTTK int
IDENFR factor
SEMICN ;
IDENFR factor
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR x
ASSIGN =
IDENFR func_if_D1array
LPARENT (
IDENFR AB
COMMA ,
IDENFR factor
RPARENT )
SEMICN ;
IDENFR func_if_D2array
LPARENT (
IDENFR array_E
COMMA ,
IDENFR factor
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Loop 7 times, once continue, once break. Symbol j = %d. func_while(x, y)is done!\n"
COMMA ,
IDENFR func_while
LPARENT (
IDENFR var5
COMMA ,
IDENFR var6
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
