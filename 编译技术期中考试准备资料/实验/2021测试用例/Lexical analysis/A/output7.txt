INTTK int
IDENFR a
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR a_row
COMMA ,
IDENFR a_col
SEMICN ;
INTTK int
IDENFR b_row
COMMA ,
IDENFR b_col
SEMICN ;
INTTK int
IDENFR c_row
COMMA ,
IDENFR c_col
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR err
SEMICN ;
CONSTTK const
INTTK int
IDENFR l
ASSIGN =
INTCON 0
COMMA ,
IDENFR r
ASSIGN =
INTCON 0
SEMICN ;
VOIDTK void
IDENFR Matrix_mult
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR a_row
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR b_col
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
LSS <
IDENFR a_col
RPARENT )
LBRACE {
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
MULT *
IDENFR b
LBRACK [
IDENFR k
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR c_row
ASSIGN =
IDENFR i
SEMICN ;
IDENFR c_col
ASSIGN =
IDENFR j
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Matrix_add
LPARENT (
INTTK int
IDENFR row
COMMA ,
INTTK int
IDENFR col
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR row
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR col
RPARENT )
LBRACE {
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR c_row
ASSIGN =
IDENFR i
SEMICN ;
IDENFR c_col
ASSIGN =
IDENFR j
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Matrix_sub
LPARENT (
INTTK int
IDENFR row
COMMA ,
INTTK int
IDENFR col
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR row
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR col
RPARENT )
LBRACE {
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
MINU -
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR c_row
ASSIGN =
IDENFR i
SEMICN ;
IDENFR c_col
ASSIGN =
IDENFR j
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Error
LPARENT (
RPARENT )
LBRACE {
IDENFR err
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR init
LPARENT (
INTTK int
IDENFR row
COMMA ,
INTTK int
IDENFR col
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR row
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR col
RPARENT )
LBRACE {
IDENFR c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Print
LPARENT (
INTTK int
IDENFR row
COMMA ,
INTTK int
IDENFR col
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR row
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR col
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR init
LPARENT (
IDENFR row
COMMA ,
IDENFR col
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR meet_conditions
LPARENT (
INTTK int
IDENFR kind
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR kind
EQL ==
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a_row
EQL ==
IDENFR b_row
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a_col
EQL ==
IDENFR b_col
RPARENT )
LBRACE {
INTTK int
IDENFR row
ASSIGN =
IDENFR a_row
SEMICN ;
INTTK int
IDENFR col
ASSIGN =
IDENFR b_col
SEMICN ;
IDENFR Matrix_add
LPARENT (
IDENFR row
COMMA ,
IDENFR col
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
IDENFR Error
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR kind
EQL ==
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a_row
EQL ==
IDENFR b_row
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a_col
EQL ==
IDENFR b_col
RPARENT )
LBRACE {
INTTK int
IDENFR row
ASSIGN =
IDENFR a_row
SEMICN ;
INTTK int
IDENFR col
ASSIGN =
IDENFR b_col
SEMICN ;
IDENFR Matrix_sub
LPARENT (
IDENFR row
COMMA ,
IDENFR col
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
IDENFR Error
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR kind
EQL ==
INTCON 3
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a_col
EQL ==
IDENFR b_row
RPARENT )
LBRACE {
IDENFR Matrix_mult
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR Error
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
IDENFR Error
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19182604\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
INTTK int
IDENFR num
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR num
LSS <
INTCON 9
RPARENT )
LBRACE {
IDENFR err
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a_row
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR a_col
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR a_row
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR a_col
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR b_row
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b_col
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR b_row
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR b_col
RPARENT )
LBRACE {
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
INTTK int
IDENFR kind
SEMICN ;
IDENFR kind
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR meet_conditions
LPARENT (
IDENFR kind
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR err
NEQ !=
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR num
ASSIGN =
IDENFR num
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
