CONSTTK const
INTTK int
IDENFR g_const_1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_2
ASSIGN =
INTCON 1
COMMA ,
IDENFR g_const_3
ASSIGN =
INTCON 1
COMMA ,
IDENFR g_const_4
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_5
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR g_const_7
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR g_const_6
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR g_const_6
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR g_var_2
ASSIGN =
INTCON 1
COMMA ,
IDENFR g_var_3
ASSIGN =
INTCON 1
COMMA ,
IDENFR g_var_4
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR g_var_5
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g_var_7
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR g_var_8
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR g_const_6
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR g_const_6
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR fun_int_1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_int_2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_int_3
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_int_4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_int_5
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_int_6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_int_7
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_void_1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_void_2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_void_3
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_void_4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR fun_void_5
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR fun_void_6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fun_void_7
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373135\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "global g_var_6[1][0]:%d, g_var_6[1][1]:%d\n"
COMMA ,
IDENFR g_var_6
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR g_var_6
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR l_const_1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR l_const_2
ASSIGN =
IDENFR l_const_1
SEMICN ;
CONSTTK const
INTTK int
IDENFR l_const_3
ASSIGN =
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR l_const_4
ASSIGN =
INTCON 1
COMMA ,
IDENFR l_const_5
ASSIGN =
INTCON 1
COMMA ,
IDENFR l_const_6
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR l_var_1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR l_var_2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR l_var_3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR l_var_4
ASSIGN =
INTCON 1
COMMA ,
IDENFR l_var_5
ASSIGN =
INTCON 1
COMMA ,
IDENFR l_var_6
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR l_var_7
ASSIGN =
INTCON 10
SEMICN ;
INTTK int
IDENFR l_var_8
ASSIGN =
INTCON 100
SEMICN ;
INTTK int
IDENFR l_var_9
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "local l_var_4:%d, l_var_5:%d, l_var_6:%d, l_var_7:%d, l_var_8:%d\n"
COMMA ,
IDENFR l_var_4
COMMA ,
IDENFR l_var_5
COMMA ,
IDENFR l_var_6
COMMA ,
IDENFR l_var_7
COMMA ,
IDENFR l_var_8
RPARENT )
SEMICN ;
IDENFR l_var_4
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
IDENFR l_var_5
ASSIGN =
IDENFR l_var_4
PLUS +
IDENFR l_var_4
MINU -
IDENFR l_var_4
SEMICN ;
IDENFR l_var_6
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
MINU -
INTCON 1
SEMICN ;
IDENFR l_var_4
ASSIGN =
INTCON 1
MULT *
INTCON 1
MOD %
INTCON 1
DIV /
INTCON 1
SEMICN ;
IDENFR l_var_4
ASSIGN =
INTCON 1
SEMICN ;
IDENFR l_var_5
ASSIGN =
IDENFR l_var_4
MULT *
IDENFR l_var_4
MOD %
IDENFR l_var_4
DIV /
IDENFR l_var_4
SEMICN ;
IDENFR l_var_6
ASSIGN =
INTCON 1
MULT *
LPARENT (
INTCON 1
MOD %
INTCON 1
DIV /
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "exp l_var_4:%d\n"
COMMA ,
IDENFR l_var_4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "exp l_var_5:%d\n"
COMMA ,
IDENFR l_var_5
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "exp l_var_6:%d\n"
COMMA ,
IDENFR l_var_6
RPARENT )
SEMICN ;
IDENFR l_var_7
ASSIGN =
IDENFR fun_int_1
LPARENT (
RPARENT )
SEMICN ;
IDENFR l_var_7
ASSIGN =
IDENFR fun_int_2
LPARENT (
IDENFR l_var_8
RPARENT )
SEMICN ;
IDENFR l_var_7
ASSIGN =
IDENFR fun_int_3
LPARENT (
IDENFR l_var_2
RPARENT )
SEMICN ;
IDENFR l_var_7
ASSIGN =
IDENFR fun_int_4
LPARENT (
IDENFR l_var_8
COMMA ,
IDENFR l_var_8
RPARENT )
SEMICN ;
IDENFR l_var_7
ASSIGN =
IDENFR fun_int_5
LPARENT (
IDENFR l_var_2
COMMA ,
IDENFR g_var_6
RPARENT )
SEMICN ;
IDENFR l_var_7
ASSIGN =
IDENFR fun_int_6
LPARENT (
IDENFR l_var_2
COMMA ,
IDENFR g_var_6
COMMA ,
IDENFR l_var_8
RPARENT )
SEMICN ;
IDENFR l_var_7
ASSIGN =
IDENFR fun_int_7
LPARENT (
IDENFR g_var_6
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fun_void_1
LPARENT (
RPARENT )
SEMICN ;
IDENFR fun_void_2
LPARENT (
IDENFR l_var_8
RPARENT )
SEMICN ;
IDENFR fun_void_3
LPARENT (
IDENFR l_var_2
RPARENT )
SEMICN ;
IDENFR fun_void_4
LPARENT (
IDENFR l_var_8
COMMA ,
IDENFR l_var_8
RPARENT )
SEMICN ;
IDENFR fun_void_5
LPARENT (
IDENFR l_var_2
COMMA ,
IDENFR g_var_6
RPARENT )
SEMICN ;
IDENFR fun_void_6
LPARENT (
IDENFR l_var_2
COMMA ,
IDENFR g_var_6
COMMA ,
IDENFR l_var_8
RPARENT )
SEMICN ;
IDENFR fun_void_7
LPARENT (
IDENFR g_var_6
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
IDENFR l_var_1
ASSIGN =
INTCON 1
SEMICN ;
IDENFR l_var_1
ASSIGN =
LPARENT (
IDENFR l_var_1
PLUS +
INTCON 1
RPARENT )
MULT *
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR l_var_4
NEQ !=
INTCON 1
RPARENT )
IDENFR l_var_4
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR l_var_4
EQL ==
INTCON 1
RPARENT )
IDENFR l_var_4
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR l_var_4
EQL ==
INTCON 2
RPARENT )
IDENFR l_var_4
ASSIGN =
INTCON 3
SEMICN ;
ELSETK else
IDENFR l_var_4
ASSIGN =
INTCON 4
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "if l_var_4:%d\n"
COMMA ,
IDENFR l_var_4
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR l_var_5
LSS <
INTCON 4
RPARENT )
LBRACE {
IDENFR l_var_5
ASSIGN =
IDENFR l_var_5
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR l_var_5
GRE >
INTCON 2
RPARENT )
LBRACE {
IDENFR l_var_5
ASSIGN =
IDENFR l_var_5
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR l_var_5
LEQ <=
INTCON 3
RPARENT )
LBRACE {
IDENFR l_var_5
ASSIGN =
IDENFR l_var_5
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR l_var_5
GEQ >=
INTCON 1
RPARENT )
LBRACE {
IDENFR l_var_5
ASSIGN =
IDENFR l_var_5
PLUS +
MINU -
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "while l_var_5:%d\n"
COMMA ,
IDENFR l_var_5
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR l_var_5
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IDENFR l_var_5
ASSIGN =
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
IDENFR l_var_5
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR l_var_5
RPARENT )
LBRACE {
IDENFR l_var_5
ASSIGN =
INTCON 0
SEMICN ;
CONTINUETK continue
SEMICN ;
IDENFR l_var_5
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "while l_var_5:%d\n"
COMMA ,
IDENFR l_var_5
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
NOT !
IDENFR l_var_5
RPARENT )
LBRACE {
IDENFR l_var_5
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR l_var_5
AND &&
IDENFR l_var_5
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR l_var_5
NEQ !=
INTCON 1
AND &&
IDENFR l_var_5
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR l_var_5
NEQ !=
INTCON 1
AND &&
IDENFR l_var_5
EQL ==
IDENFR l_var_5
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR l_var_5
NEQ !=
INTCON 1
OR ||
IDENFR l_var_5
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR l_var_5
EQL ==
INTCON 1
OR ||
IDENFR l_var_5
NEQ !=
INTCON 1
AND &&
IDENFR l_var_5
NEQ !=
INTCON 2
RPARENT )
LBRACE {
RBRACE }
IDENFR l_var_6
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "getint l_var_6:%d"
COMMA ,
IDENFR l_var_6
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
