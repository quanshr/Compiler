CONSTTK const
INTTK int
IDENFR const1
ASSIGN =
MINU -
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR const6
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR const4
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
MINU -
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const5
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
MINU -
PLUS +
MINU -
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const2
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 4
COMMA ,
IDENFR const3
ASSIGN =
IDENFR const6
SEMICN ;
INTTK int
IDENFR var1
SEMICN ;
INTTK int
IDENFR var2
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR var3
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR var4
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR var5
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR var6
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
MINU -
INTCON 1
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var7
COMMA ,
IDENFR var8
SEMICN ;
INTTK int
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR func5
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
ASSIGN =
INTCON 0
COMMA ,
IDENFR var9
COMMA ,
IDENFR var10
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR var11
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CONSTTK const
INTTK int
IDENFR var12
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 114514
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "-+-114514 = %d\n"
COMMA ,
IDENFR var12
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var12
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "-+-114514 > 0\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR var9
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 6
PLUS +
INTCON 7
MULT *
LPARENT (
INTCON 6
MINU -
INTCON 9
RPARENT )
DIV /
INTCON 3
DIV /
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "-+- 6 + 7 * (6 -9) / 3 / 2 = %d\n"
COMMA ,
IDENFR var9
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR var9
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR var10
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR var9
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR var10
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
MINU -
INTCON 0
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "var10[1] = %d\n"
COMMA ,
IDENFR var10
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR var13
SEMICN ;
IFTK if
LPARENT (
IDENFR var9
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR var13
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR var13
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "var13 = %d\n"
COMMA ,
IDENFR var13
RPARENT )
SEMICN ;
INTTK int
IDENFR var15
SEMICN ;
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
IDENFR var15
ASSIGN =
IDENFR func1
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func1() = %d\n"
COMMA ,
IDENFR var15
RPARENT )
SEMICN ;
IDENFR var15
ASSIGN =
IDENFR func3
LPARENT (
PLUS +
MINU -
INTCON 12
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func3(+-12) = %d\n"
COMMA ,
IDENFR var15
RPARENT )
SEMICN ;
IDENFR var15
ASSIGN =
IDENFR func4
LPARENT (
INTCON 1
COMMA ,
IDENFR var4
COMMA ,
IDENFR var6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func4(1, var4, var6) = %d\n"
COMMA ,
IDENFR var15
RPARENT )
SEMICN ;
IDENFR var15
ASSIGN =
IDENFR func4
LPARENT (
IDENFR const1
COMMA ,
IDENFR var6
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR var6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "func4(const1, var6[1], var6) = %d\n"
COMMA ,
IDENFR var15
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR var14
ASSIGN =
IDENFR var13
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
IDENFR var14
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR var14
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR var14
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RBRACE }
WHILETK while
LPARENT (
IDENFR n
LSS <
IDENFR const3
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
GRE >
INTCON 3
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IDENFR n
ASSIGN =
IDENFR n
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR testExp
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 6
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
INTCON 6
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR const4
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
INTCON 13579
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
PLUS +
INTCON 5
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 2
GRE >
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
GEQ >=
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 2
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
OR ||
INTCON 2
AND &&
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IDENFR a
ASSIGN =
INTCON 2
MULT *
INTCON 6
DIV /
INTCON 4
MOD %
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
INTCON 2
PLUS +
INTCON 3
MULT *
INTCON 4
MINU -
INTCON 5
DIV /
INTCON 6
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373163\n"
RPARENT )
SEMICN ;
IDENFR func5
LPARENT (
RPARENT )
SEMICN ;
IDENFR testExp
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
