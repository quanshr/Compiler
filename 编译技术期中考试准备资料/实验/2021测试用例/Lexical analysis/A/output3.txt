CONSTTK const
INTTK int
IDENFR a
ASSIGN =
MINU -
PLUS +
MINU -
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
INTCON 7
MULT *
INTCON 9
COMMA ,
IDENFR c
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 8
SEMICN ;
INTTK int
IDENFR e
COMMA ,
IDENFR f
ASSIGN =
MINU -
INTCON 7
SEMICN ;
CONSTTK const
INTTK int
IDENFR g
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 29
COMMA ,
MINU -
INTCON 29
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR h
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
DIV /
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 5
MULT *
INTCON 1
COMMA ,
INTCON 2
PLUS +
LPARENT (
LPARENT (
LPARENT (
INTCON 2
RPARENT )
RPARENT )
RPARENT )
PLUS +
INTCON 1
MULT *
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR i
LBRACK [
INTCON 300
RBRACK ]
COMMA ,
IDENFR j
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 2
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR func
LPARENT (
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR i_t_e_r
LPARENT (
INTTK int
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "@%d "
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR b
GRE >
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
IDENFR b
MULT *
IDENFR i_t_e_r
LPARENT (
IDENFR b
MINU -
INTCON 1
RPARENT )
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR b
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
PLUS +
INTCON 1
MULT *
INTCON 3
SEMICN ;
RBRACE }
INTTK int
IDENFR iter_pro
LPARENT (
INTTK int
IDENFR b_
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "*%d "
COMMA ,
IDENFR b_
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR b_
LSS <
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
IDENFR iter_pro
LPARENT (
IDENFR b_
MINU -
INTCON 1
RPARENT )
PLUS +
IDENFR i_t_e_r
LPARENT (
IDENFR b_
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR change
LPARENT (
INTTK int
IDENFR k
COMMA ,
INTTK int
IDENFR m
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
LBRACK [
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
MINU -
INTCON 1
SEMICN ;
IDENFR m
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR m
LBRACK [
INTCON 0
RBRACK ]
MINU -
INTCON 1
SEMICN ;
IDENFR n
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR n
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MINU -
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR k
COMMA ,
IDENFR l
ASSIGN =
INTCON 9
SEMICN ;
INTTK int
IDENFR m
LBRACK [
INTCON 9
RBRACK ]
SEMICN ;
INTTK int
IDENFR n
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR l
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR n
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19231133\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n%d\n%d\n"
COMMA ,
IDENFR func2
LPARENT (
RPARENT )
PLUS +
IDENFR i_t_e_r
LPARENT (
IDENFR k
RPARENT )
COMMA ,
IDENFR i_t_e_r
LPARENT (
IDENFR l
RPARENT )
COMMA ,
IDENFR i_t_e_r
LPARENT (
IDENFR i_t_e_r
LPARENT (
INTCON 0
RPARENT )
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR iter_pro
LPARENT (
IDENFR iter_pro
LPARENT (
IDENFR iter_pro
LPARENT (
IDENFR n
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
RPARENT )
PLUS +
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "before: %d, %d, %d\n"
COMMA ,
IDENFR l
COMMA ,
IDENFR i
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR n
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR change
LPARENT (
IDENFR l
COMMA ,
IDENFR i
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "after: %d, %d, %d\n"
COMMA ,
IDENFR l
COMMA ,
IDENFR i
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR n
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 7
EQL ==
INTCON 7
RPARENT )
LBRACE {
IFTK if
LPARENT (
MINU -
INTCON 8
GEQ >=
MINU -
INTCON 7
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "Con"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
OR ||
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 4
LEQ <=
INTCON 3
AND &&
INTCON 0
GRE >
MINU -
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "gra"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
AND &&
INTCON 1
OR ||
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
MINU -
INTCON 1
LSS <
MINU -
INTCON 9
OR ||
INTCON 0
LSS <
MINU -
INTCON 1
OR ||
MINU -
INTCON 93
LSS <
MINU -
INTCON 93
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "tul"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
AND &&
INTCON 1
AND &&
INTCON 1
AND &&
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 0
GRE >
INTCON 0
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "ati"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
OR ||
INTCON 0
OR ||
INTCON 0
OR ||
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "on!\n"
RPARENT )
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
