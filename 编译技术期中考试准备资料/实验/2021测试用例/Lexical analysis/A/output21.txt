VOIDTK void
IDENFR _
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR _C
ASSIGN =
LPARENT (
MINU -
INTCON 5
MULT *
INTCON 8
RPARENT )
PLUS +
PLUS +
INTCON 300
DIV /
INTCON 1
MINU -
MINU -
INTCON 7
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19%d384\n"
COMMA ,
IDENFR _C
PLUS +
INTCON 120
MOD %
INTCON 121
MINU -
INTCON 14
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR DoNotCall
LPARENT (
RPARENT )
LBRACE {
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
MINU -
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR addN
LPARENT (
INTTK int
IDENFR p0
COMMA ,
INTTK int
IDENFR N
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR p0
ASSIGN =
IDENFR p0
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
IDENFR N
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
IDENFR p0
SEMICN ;
RBRACE }
INTTK int
IDENFR add2
LPARENT (
INTTK int
IDENFR p0
RPARENT )
LBRACE {
RETURNTK return
IDENFR addN
LPARENT (
IDENFR p0
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR aAddN
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR length
COMMA ,
INTTK int
IDENFR N
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR length
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR addN
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
COMMA ,
IDENFR N
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR addBoardcast
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR length
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR length
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR b
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR _
LPARENT (
RPARENT )
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "const and var // decl and def test\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR f0
SEMICN ;
INTTK int
IDENFR f1
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR f2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR g0
ASSIGN =
INTCON 2
COMMA ,
IDENFR g1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
IDENFR g2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 7
COMMA ,
INTCON 10
RBRACE }
COMMA ,
LBRACE {
INTCON 27
COMMA ,
INTCON 96
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR h1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR h11
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 4
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR h2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR h11
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR h1
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
IDENFR h1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR h11
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
IDENFR f1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR g1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR f0
ASSIGN =
IDENFR h2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR f1
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR g2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "expected result: 579, output: %d\n"
COMMA ,
IDENFR f0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 579
NEQ !=
IDENFR f0
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "function (def and )call test\n"
RPARENT )
SEMICN ;
IDENFR f1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR add2
LPARENT (
IDENFR f0
RPARENT )
SEMICN ;
IDENFR f1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR addN
LPARENT (
IDENFR h1
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
INTCON 5
RPARENT )
SEMICN ;
IDENFR aAddN
LPARENT (
IDENFR f1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR f2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 5
SEMICN ;
IDENFR f2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 10
SEMICN ;
IDENFR f2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 15
SEMICN ;
IDENFR f2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 20
SEMICN ;
IDENFR addBoardcast
LPARENT (
IDENFR f2
COMMA ,
IDENFR f1
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "expected result: {{589, 21}, {599, 31}}, output: {{%d, %d}, {%d, %d}}\n"
COMMA ,
IDENFR f2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR f2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR f2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR f2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR f2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
NEQ !=
INTCON 589
RPARENT )
RETURNTK return
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR f2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
NEQ !=
INTCON 21
RPARENT )
RETURNTK return
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR f2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
NEQ !=
INTCON 599
RPARENT )
RETURNTK return
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR f2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
NEQ !=
INTCON 31
RPARENT )
RETURNTK return
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "LExp test, falling into infinite loop indicates an error -- "
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
OR ||
INTCON 2
LSS <
INTCON 1
OR ||
INTCON 1
GRE >
INTCON 1
OR ||
INTCON 3
GEQ >=
INTCON 5
OR ||
INTCON 7
LEQ <=
INTCON 6
OR ||
INTCON 9
EQL ==
INTCON 10
OR ||
INTCON 1
OR ||
IDENFR DoNotCall
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
AND &&
NOT !
INTCON 2
AND &&
IDENFR DoNotCall
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "pass\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "simple echo test, get a integer and read back: "
RPARENT )
SEMICN ;
INTTK int
IDENFR gk
SEMICN ;
IDENFR gk
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR gk
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n\n================================================================================\n                                     PASSED                                     \n================================================================================\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
