CONSTTK const
INTTK int
IDENFR const_a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_b
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_c
ASSIGN =
PLUS +
INTCON 2
COMMA ,
IDENFR const_d
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR int_c
ASSIGN =
INTCON 2
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR int_d
SEMICN ;
INTTK int
IDENFR int_e
ASSIGN =
INTCON 2
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_array
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_double
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR array
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
INTTK int
IDENFR matrix_A
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR matrix_B
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR output_id
LPARENT (
RPARENT )
LBRACE {
IFTK if
LPARENT (
NOT !
INTCON 0
AND &&
INTCON 0
OR ||
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373630\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR output_a_plus_b
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
PLUS +
IDENFR b
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR A_plus_B
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR return_one
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR factorial
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR array
LBRACK [
IDENFR n
RBRACK ]
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
IDENFR array
LBRACK [
IDENFR n
RBRACK ]
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR array
LBRACK [
IDENFR n
MINU -
INTCON 1
RBRACK ]
ASSIGN =
IDENFR factorial
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
SEMICN ;
IDENFR array
LBRACK [
IDENFR n
RBRACK ]
ASSIGN =
IDENFR array
LBRACK [
IDENFR n
MINU -
INTCON 1
RBRACK ]
MULT *
IDENFR n
SEMICN ;
RETURNTK return
IDENFR array
LBRACK [
IDENFR n
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR isPrime
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 3
SEMICN ;
IFTK if
LPARENT (
IDENFR n
LEQ <=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
LPARENT (
IDENFR n
MOD %
INTCON 2
RPARENT )
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
LPARENT (
IDENFR n
DIV /
INTCON 2
RPARENT )
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
PLUS +
INTCON 1
MINU -
INTCON 1
DIV /
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR sumMatrix
LPARENT (
INTTK int
IDENFR array_f
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR array_f
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR matrixMulti
LPARENT (
INTTK int
IDENFR matrix_a
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
INTTK int
IDENFR matrix_b
LBRACK [
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
INTTK int
IDENFR row
RPARENT )
LBRACE {
INTTK int
IDENFR matrix_c
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
IDENFR matrix_c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR matrix_c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR matrix_c
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR matrix_a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
MULT *
IDENFR matrix_b
LBRACK [
IDENFR k
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sumMatrix
LPARENT (
IDENFR matrix_c
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR output_id
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR isPrime
LPARENT (
INTCON 80
PLUS +
INTCON 3
MULT *
INTCON 3
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR const_b
GEQ >=
IDENFR int_c
RPARENT )
LBRACE {
IDENFR int_d
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR const_b
EQL ==
IDENFR int_d
RPARENT )
LBRACE {
IDENFR int_e
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR const_b
GRE >
IDENFR int_e
RPARENT )
LBRACE {
IDENFR int_d
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR int_d
ASSIGN =
INTCON 4
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 5
COMMA ,
IDENFR j
SEMICN ;
IDENFR int_c
ASSIGN =
IDENFR i
PLUS +
INTCON 3
MULT *
INTCON 2
DIV /
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 100
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
OR ||
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR int_c
OR ||
IDENFR i
GRE >
IDENFR int_c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR factorial
LPARENT (
IDENFR i
RPARENT )
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR i
EQL ==
IDENFR int_c
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
IDENFR int_c
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR return_one
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR A_plus_B
LPARENT (
INTCON 1
COMMA ,
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
IDENFR output_a_plus_b
LPARENT (
INTCON 2
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
PLUS +
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR matrix_A
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR matrix_B
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR matrixMulti
LPARENT (
IDENFR matrix_A
COMMA ,
IDENFR matrix_B
COMMA ,
IDENFR matrix_A
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
