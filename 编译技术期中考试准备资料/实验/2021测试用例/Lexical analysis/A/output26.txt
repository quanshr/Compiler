CONSTTK const
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR a2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
MINU -
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR a3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
MINU -
INTCON 4
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b1
ASSIGN =
INTCON 6
SEMICN ;
INTTK int
IDENFR b2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 7
COMMA ,
MINU -
INTCON 8
RBRACE }
SEMICN ;
INTTK int
IDENFR b3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 9
COMMA ,
INTCON 10
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR c1
ASSIGN =
INTCON 1
COMMA ,
IDENFR c2
ASSIGN =
INTCON 2
COMMA ,
IDENFR c3
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR d1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 4
COMMA ,
MINU -
INTCON 5
RBRACE }
COMMA ,
IDENFR d2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 6
COMMA ,
INTCON 7
COMMA ,
MINU -
INTCON 8
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR e1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 3
COMMA ,
INTCON 1
RBRACE }
RBRACE }
COMMA ,
IDENFR e2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 9
COMMA ,
INTCON 10
COMMA ,
MINU -
INTCON 11
RBRACE }
COMMA ,
LBRACE {
MINU -
INTCON 12
COMMA ,
INTCON 13
COMMA ,
INTCON 14
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR v1
COMMA ,
IDENFR v2
ASSIGN =
INTCON 2
COMMA ,
IDENFR v3
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR arr2
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR arr3
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
MINU -
INTCON 1
COMMA ,
PLUS +
MINU -
INTCON 1
COMMA ,
MINU -
PLUS +
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR arr4
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 6
RBRACK ]
COMMA ,
IDENFR arr5
LBRACK [
INTCON 7
RBRACK ]
LBRACK [
INTCON 8
RBRACK ]
SEMICN ;
VOIDTK void
IDENFR printMyId
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "79066012\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "x = %d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR sort
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
PLUS +
INTCON 1
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
MINU -
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR t
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR n
MINU -
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR a
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR t
ASSIGN =
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
IDENFR t
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
LPARENT (
IDENFR n
MINU -
INTCON 1
RPARENT )
MULT *
INTCON 2
DIV /
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR getSum
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
INTCON 0
LEQ <=
IDENFR i
AND &&
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR isPrime
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 0
OR ||
IDENFR x
EQL ==
INTCON 1
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 2
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
MULT *
IDENFR i
LEQ <=
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR getPrimeFactor
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR first
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR print
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR x
NEQ !=
INTCON 1
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR isPrime
LPARENT (
IDENFR i
RPARENT )
AND &&
IDENFR x
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR x
ASSIGN =
IDENFR x
DIV /
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR first
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR first
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "*%d"
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR printMatrix
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LSS <
INTCON 3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d "
COMMA ,
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR sum
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR printMyId
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR x
COMMA ,
IDENFR arr
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
MINU -
PLUS +
INTCON 5
COMMA ,
PLUS +
MINU -
PLUS +
INTCON 3
COMMA ,
MINU -
PLUS +
MINU -
INTCON 4
COMMA ,
MINU -
INTCON 8
COMMA ,
INTCON 2
COMMA ,
PLUS +
MINU -
INTCON 7
COMMA ,
MINU -
INTCON 9
COMMA ,
INTCON 10
COMMA ,
MINU -
INTCON 6
COMMA ,
PLUS +
INTCON 1
RBRACE }
SEMICN ;
IDENFR sort
LPARENT (
IDENFR arr
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
IDENFR getSum
LPARENT (
IDENFR arr
COMMA ,
INTCON 10
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR getPrimeFactor
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
RPARENT )
LBRACE {
RBRACE }
WHILETK while
LPARENT (
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IDENFR x
ASSIGN =
IDENFR sum
LPARENT (
IDENFR arr
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
IDENFR sum
LPARENT (
IDENFR arr
PLUS +
INTCON 3
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
IDENFR isPrime
LPARENT (
IDENFR arr
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR p
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR q
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 5
RPARENT )
BREAKTK break
SEMICN ;
IDENFR i
ASSIGN =
LPARENT (
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "! is work\n"
RPARENT )
SEMICN ;
IDENFR x
ASSIGN =
INTCON 8
MULT *
LPARENT (
INTCON 7
PLUS +
INTCON 6
RPARENT )
DIV /
LPARENT (
INTCON 2
MINU -
INTCON 3
RPARENT )
MOD %
INTCON 2
SEMICN ;
IDENFR print
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
INTTK int
IDENFR arrr
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
IDENFR x
ASSIGN =
IDENFR isPrime
LPARENT (
IDENFR arrr
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IDENFR printMatrix
LPARENT (
IDENFR arrr
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "end compile\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
