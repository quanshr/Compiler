CONSTTK const
INTTK int
IDENFR cnum1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR cnum2
ASSIGN =
INTCON 2
COMMA ,
IDENFR cnum3
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR carray1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR carray2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
IDENFR carray3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR carrays1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR carrays2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
COMMA ,
IDENFR carrays3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR vfun1
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR vfun2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR vfun3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR vfun4
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR vfun5
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR vfun6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR vfun7
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR ifun1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR ifun2
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR ifun3
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
INTTK int
IDENFR ifun4
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR ifun5
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR ifun6
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR ifun7
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373749\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 0
COMMA ,
IDENFR c
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR array1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR array2
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
IDENFR array3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR arrays1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR arrays2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
COMMA ,
IDENFR arrays3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
RBRACE }
RBRACE }
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR array1
LBRACK [
IDENFR a
MULT *
IDENFR a
RBRACK ]
ASSIGN =
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
IDENFR a
PLUS +
IDENFR b
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 0
GRE >
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GEQ >=
IDENFR b
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
IDENFR a
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "yes\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "no\n"
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
BREAKTK break
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR b
SEMICN ;
IDENFR a
ASSIGN =
INTCON 2
SEMICN ;
IDENFR a
ASSIGN =
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
PLUS +
MINU -
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR ifun1
LPARENT (
RPARENT )
SEMICN ;
IDENFR array1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR ifun2
LPARENT (
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR array1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR arrays1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR ifun3
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR arrays1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MULT *
IDENFR arrays1
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
DIV /
IDENFR arrays2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
MOD %
IDENFR arrays3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR ifun4
LPARENT (
IDENFR arrays3
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR ifun7
LPARENT (
IDENFR arrays1
COMMA ,
IDENFR arrays2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
MINU -
IDENFR array2
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
