CONSTTK const
INTTK int
IDENFR globalConst1
ASSIGN =
INTCON 11
COMMA ,
IDENFR globalConst2
ASSIGN =
INTCON 22
SEMICN ;
CONSTTK const
INTTK int
IDENFR globalConstArray2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 6
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 8
COMMA ,
INTCON 9
RBRACE }
COMMA ,
LBRACE {
INTCON 10
COMMA ,
INTCON 11
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR globalConstArray1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 10
COMMA ,
INTCON 20
COMMA ,
INTCON 30
RBRACE }
SEMICN ;
INTTK int
IDENFR globalVirable1
ASSIGN =
INTCON 111
COMMA ,
IDENFR globalVirable2
SEMICN ;
VOIDTK void
IDENFR assignmentArray
LPARENT (
INTTK int
IDENFR n
COMMA ,
INTTK int
IDENFR array1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR array2
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
IDENFR i
SEMICN ;
INTTK int
IDENFR m
ASSIGN =
IDENFR n
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
AND &&
IDENFR i
LEQ <=
IDENFR m
RPARENT )
LBRACE {
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR globalConstArray1
LBRACK [
IDENFR i
RBRACK ]
DIV /
INTCON 10
MINU -
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR globalConstArray1
LBRACK [
IDENFR i
RBRACK ]
DIV /
INTCON 10
MINU -
INTCON 10
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR array2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR globalConstArray2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
MOD %
INTCON 6
PLUS +
INTCON 6
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "[%d][%d]:%d|%d , [%d]:%d|%d\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR array2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
COMMA ,
IDENFR globalConstArray2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
COMMA ,
IDENFR i
COMMA ,
IDENFR array1
LBRACK [
IDENFR i
RBRACK ]
COMMA ,
IDENFR globalConstArray1
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373063\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR localVirable1
ASSIGN =
IDENFR globalConst1
SEMICN ;
INTTK int
IDENFR localVirableArray1
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR localVirableArray2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR localVirable2
ASSIGN =
IDENFR globalConstArray2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
INTTK int
IDENFR n
ASSIGN =
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1.localVirable1 = %d,localVirable2 = %d \n2.\n"
COMMA ,
IDENFR localVirable1
COMMA ,
IDENFR localVirable2
RPARENT )
SEMICN ;
IDENFR assignmentArray
LPARENT (
IDENFR n
COMMA ,
IDENFR localVirableArray1
COMMA ,
IDENFR localVirableArray2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d?\n"
COMMA ,
IDENFR localVirableArray2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "3.function of kinds of parameters testified\n"
RPARENT )
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
INTCON 1
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "4.non exp testified\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
