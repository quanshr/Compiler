CONSTTK const
INTTK int
IDENFR zhenghw
ASSIGN =
INTCON 100
SEMICN ;
CONSTTK const
INTTK int
IDENFR ID
ASSIGN =
INTCON 19373339
SEMICN ;
CONSTTK const
INTTK int
IDENFR abc123
ASSIGN =
INTCON 1
COMMA ,
IDENFR abc124
ASSIGN =
INTCON 2
COMMA ,
IDENFR abc125
ASSIGN =
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR a
SEMICN ;
INTTK int
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR d
COMMA ,
IDENFR f
COMMA ,
IDENFR g
SEMICN ;
INTTK int
IDENFR AA
SEMICN ;
INTTK int
IDENFR e
ASSIGN =
INTCON 66
SEMICN ;
CONSTTK const
INTTK int
IDENFR a3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR h3
ASSIGN =
INTCON 6
SEMICN ;
INTTK int
IDENFR b3
COMMA ,
IDENFR c3
COMMA ,
IDENFR d3
SEMICN ;
INTTK int
IDENFR e3
LBRACK [
INTCON 4
RBRACK ]
COMMA ,
IDENFR f3
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR ii3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 9
COMMA ,
INTCON 8
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR g3
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR funcAA
LPARENT (
INTTK int
IDENFR x
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR y
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR tempp
SEMICN ;
IDENFR tempp
ASSIGN =
IDENFR x
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR y
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
RETURNTK return
IDENFR tempp
SEMICN ;
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR paramA
RPARENT )
LBRACE {
INTTK int
IDENFR declInBlock
SEMICN ;
INTTK int
IDENFR temp
ASSIGN =
INTCON 2
SEMICN ;
IDENFR declInBlock
ASSIGN =
IDENFR abc123
SEMICN ;
IDENFR declInBlock
ASSIGN =
PLUS +
INTCON 3
SEMICN ;
IFTK if
LPARENT (
IDENFR e
RPARENT )
IDENFR temp
ASSIGN =
INTCON 1
SEMICN ;
ELSETK else
IDENFR temp
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR e
EQL ==
INTCON 66
RPARENT )
IDENFR temp
ASSIGN =
INTCON 3
SEMICN ;
ELSETK else
IDENFR temp
ASSIGN =
INTCON 4
SEMICN ;
IFTK if
LPARENT (
IDENFR e
NEQ !=
IDENFR abc123
RPARENT )
IDENFR temp
ASSIGN =
INTCON 5
SEMICN ;
ELSETK else
IDENFR temp
ASSIGN =
INTCON 6
SEMICN ;
IFTK if
LPARENT (
IDENFR e
GRE >
INTCON 1
RPARENT )
IDENFR temp
ASSIGN =
INTCON 7
SEMICN ;
IFTK if
LPARENT (
IDENFR e
PLUS +
INTCON 4
LSS <
INTCON 80
RPARENT )
IDENFR temp
ASSIGN =
INTCON 8
SEMICN ;
IFTK if
LPARENT (
IDENFR e
LEQ <=
INTCON 90
RPARENT )
IDENFR temp
ASSIGN =
INTCON 9
SEMICN ;
IFTK if
LPARENT (
IDENFR e
GEQ >=
INTCON 100
RPARENT )
IDENFR temp
ASSIGN =
INTCON 10
SEMICN ;
IFTK if
LPARENT (
IDENFR e
MULT *
INTCON 2
EQL ==
INTCON 140
RPARENT )
IDENFR temp
ASSIGN =
INTCON 11
SEMICN ;
IFTK if
LPARENT (
IDENFR e
DIV /
INTCON 2
EQL ==
INTCON 33
RPARENT )
IDENFR temp
ASSIGN =
INTCON 12
SEMICN ;
IFTK if
LPARENT (
IDENFR e
MOD %
IDENFR abc124
EQL ==
INTCON 1
RPARENT )
IDENFR temp
ASSIGN =
INTCON 13
SEMICN ;
IFTK if
LPARENT (
NOT !
LPARENT (
INTCON 0
PLUS +
INTCON 1
RPARENT )
RPARENT )
IDENFR temp
ASSIGN =
INTCON 14
SEMICN ;
WHILETK while
LPARENT (
IDENFR e
MINU -
INTCON 1
GEQ >=
INTCON 0
RPARENT )
LBRACE {
INTTK int
IDENFR bbb
ASSIGN =
IDENFR e
MINU -
INTCON 1
SEMICN ;
IDENFR e
ASSIGN =
IDENFR bbb
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
INTCON 1
EQL ==
INTCON 0
RPARENT )
CONTINUETK continue
SEMICN ;
RETURNTK return
LPARENT (
MINU -
IDENFR temp
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR xxx
COMMA ,
INTTK int
IDENFR yyy
RPARENT )
LBRACE {
LBRACE {
RBRACE }
RETURNTK return
LPARENT (
INTCON 4
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func4
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
PLUS +
MINU -
IDENFR zhenghw
SEMICN ;
IDENFR b
ASSIGN =
IDENFR abc123
PLUS +
IDENFR abc124
PLUS +
IDENFR abc124
SEMICN ;
IDENFR c
ASSIGN =
IDENFR abc123
PLUS +
IDENFR abc124
MULT *
IDENFR abc125
SEMICN ;
IDENFR d
ASSIGN =
IDENFR func3
LPARENT (
IDENFR abc123
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
IDENFR f
ASSIGN =
IDENFR func1
LPARENT (
IDENFR abc124
RPARENT )
SEMICN ;
IDENFR g
ASSIGN =
IDENFR func4
LPARENT (
RPARENT )
SEMICN ;
IDENFR b3
ASSIGN =
IDENFR a3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR c3
ASSIGN =
IDENFR a3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR d3
ASSIGN =
IDENFR a3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTTK int
IDENFR temp3
COMMA ,
IDENFR inn
SEMICN ;
INTTK int
IDENFR j3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR ii3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 2
COMMA ,
IDENFR ii3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
IDENFR ii3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR ii3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
IDENFR temp3
ASSIGN =
IDENFR funcAA
LPARENT (
IDENFR ii3
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR j3
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
RPARENT )
SEMICN ;
IDENFR inn
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373339"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR c3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR d3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR temp3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR g3
LBRACK [
INTCON 3
DIV /
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "123456\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "123456\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "123456\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
