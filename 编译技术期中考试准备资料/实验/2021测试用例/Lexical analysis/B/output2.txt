CONSTTK const
INTTK int
IDENFR a0
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR b0
ASSIGN =
INTCON 2
COMMA ,
IDENFR c0
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR a1
ASSIGN =
INTCON 0
COMMA ,
IDENFR b1
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR c1
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR s1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR s2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR s3
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR s4
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR dealSet0
LPARENT (
INTTK int
IDENFR s1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR s2
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR s1
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR s2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR s2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR getnumber
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR instantA
COMMA ,
IDENFR instantB
COMMA ,
IDENFR instantC
SEMICN ;
IDENFR instantA
ASSIGN =
INTCON 1
PLUS +
IDENFR a0
PLUS +
LPARENT (
IDENFR b0
PLUS +
IDENFR c0
RPARENT )
SEMICN ;
IDENFR instantB
ASSIGN =
IDENFR instantA
MULT *
IDENFR instantA
DIV /
IDENFR instantA
MOD %
IDENFR b0
SEMICN ;
IDENFR instantB
ASSIGN =
IDENFR instantA
MINU -
LPARENT (
IDENFR instantB
PLUS +
IDENFR c0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR b1
LSS <
IDENFR a1
EQL ==
IDENFR a1
LSS <
IDENFR a1
NEQ !=
IDENFR b1
GRE >
IDENFR b1
NEQ !=
IDENFR a1
GRE >
IDENFR a1
EQL ==
IDENFR b1
LEQ <=
IDENFR b1
EQL ==
IDENFR b1
GEQ >=
IDENFR b1
RPARENT )
LBRACE {
IDENFR instantC
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "A = %d\n"
COMMA ,
IDENFR instantA
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "B = %d\n"
COMMA ,
IDENFR instantB
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "C = %d\n"
COMMA ,
IDENFR instantC
RPARENT )
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR addself
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
PLUS +
IDENFR a
SEMICN ;
RBRACE }
INTTK int
IDENFR multself
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
RETURNTK return
IDENFR a
MULT *
IDENFR a
SEMICN ;
RBRACE }
VOIDTK void
IDENFR none
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR minus
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR value
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR cycle
SEMICN ;
SEMICN ;
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "19231007\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "input recurrent cycle:\n"
RPARENT )
SEMICN ;
IDENFR cycle
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "cycle is: %d\n"
COMMA ,
IDENFR cycle
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "input initial value:\n"
RPARENT )
SEMICN ;
IDENFR value
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "initial value is: %d\n"
COMMA ,
IDENFR value
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "your input is good\n"
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR cycle
RPARENT )
LBRACE {
IDENFR value
ASSIGN =
IDENFR addself
LPARENT (
IDENFR value
RPARENT )
SEMICN ;
IDENFR value
ASSIGN =
IDENFR multself
LPARENT (
IDENFR value
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "your input is zero\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cycle
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
RBRACE }
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IDENFR value
ASSIGN =
IDENFR value
MINU -
IDENFR getnumber
LPARENT (
RPARENT )
MINU -
IDENFR dealSet0
LPARENT (
IDENFR s3
COMMA ,
IDENFR s4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "final value is: %d\n"
COMMA ,
IDENFR value
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
