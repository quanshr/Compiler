INTTK int
IDENFR val_L
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_a
ASSIGN =
INTCON 1
MINU -
INTCON 2
PLUS +
LPARENT (
MINU -
INTCON 3
RPARENT )
MULT *
INTCON 4
PLUS +
INTCON 5
DIV /
LPARENT (
INTCON 2
PLUS +
INTCON 3
RPARENT )
MINU -
INTCON 6
MOD %
INTCON 4
COMMA ,
IDENFR const_b
ASSIGN =
LPARENT (
LPARENT (
INTCON 5
MINU -
INTCON 10
RPARENT )
MULT *
LPARENT (
MINU -
INTCON 4
RPARENT )
PLUS +
INTCON 4
RPARENT )
DIV /
INTCON 6
MULT *
LPARENT (
INTCON 3
MOD %
INTCON 6
DIV /
INTCON 3
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_array1_a
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_array2_a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
COMMA ,
IDENFR const_array2_b
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var_array1_a
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR var_array2_a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR check_LandEq
LPARENT (
RPARENT )
LBRACE {
IDENFR val_L
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR val_L
ASSIGN =
IDENFR val_L
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR val_L
ASSIGN =
IDENFR val_L
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR val_L
EQL ==
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "L and Eq is ok (no params)\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "sth wrong with L and Eq (no params)\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR check_Rel
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR c
RPARENT )
LBRACE {
INTTK int
IDENFR val_Rel
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GEQ >=
INTCON 1
RPARENT )
LBRACE {
IDENFR val_Rel
ASSIGN =
IDENFR val_Rel
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
LEQ <=
INTCON 2
RPARENT )
LBRACE {
IDENFR val_Rel
ASSIGN =
IDENFR val_Rel
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
LSS <
IDENFR b
RPARENT )
LBRACE {
IDENFR val_Rel
ASSIGN =
IDENFR val_Rel
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
GRE >
INTCON 2
RPARENT )
LBRACE {
IDENFR val_Rel
ASSIGN =
IDENFR val_Rel
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR val_Rel
ASSIGN =
IDENFR val_Rel
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
NEQ !=
INTCON 3
RPARENT )
LBRACE {
IDENFR val_Rel
ASSIGN =
IDENFR val_Rel
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR val_Rel
SEMICN ;
RBRACE }
VOIDTK void
IDENFR check_Add
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR const_a
EQL ==
IDENFR x
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Add is ok1\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR const_b
EQL ==
INTCON 4
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Add is ok2\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR check_block
LPARENT (
INTTK int
IDENFR a2
COMMA ,
INTTK int
IDENFR b2
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c2
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR tmp0
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp1
ASSIGN =
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a2
GRE >
INTCON 0
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR tmp1
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR tmp1
ASSIGN =
IDENFR tmp1
MINU -
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR b2
LBRACK [
INTCON 1
RBRACK ]
EQL ==
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR tmp1
ASSIGN =
IDENFR tmp1
MINU -
INTCON 2
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
LBRACE {
WHILETK while
LPARENT (
IDENFR tmp0
LSS <
INTCON 0
RPARENT )
LBRACE {
IDENFR tmp0
ASSIGN =
IDENFR tmp0
PLUS +
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR c2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
EQL ==
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR tmp0
ASSIGN =
IDENFR tmp0
PLUS +
INTCON 2
SEMICN ;
RBRACE }
RBRACE }
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tmp0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR tmp1
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR val_Rel
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373408 all weak points\n"
RPARENT )
SEMICN ;
IDENFR check_LandEq
LPARENT (
RPARENT )
SEMICN ;
IDENFR val_Rel
ASSIGN =
IDENFR check_Rel
LPARENT (
INTCON 1
COMMA ,
INTCON 6
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR val_Rel
EQL ==
INTCON 6
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Rel is ok (with params)\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "sth wrong with Rel (no params)\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR check_Add
LPARENT (
MINU -
INTCON 14
RPARENT )
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR check_block
LPARENT (
IDENFR a
COMMA ,
IDENFR var_array1_a
COMMA ,
IDENFR var_array2_a
RPARENT )
SEMICN ;
IDENFR check_block
LPARENT (
MINU -
INTCON 1
COMMA ,
IDENFR var_array1_a
COMMA ,
IDENFR var_array2_a
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
