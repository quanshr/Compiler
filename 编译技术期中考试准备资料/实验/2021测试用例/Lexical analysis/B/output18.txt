CONSTTK const
INTTK int
IDENFR const_val_1
LBRACK [
INTCON 2
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
IDENFR const_val_2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 4
COMMA ,
INTCON 5
RBRACE }
COMMA ,
LBRACE {
INTCON 6
COMMA ,
INTCON 7
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var_val_0
LBRACK [
INTCON 4
MULT *
INTCON 2
RBRACK ]
COMMA ,
IDENFR var_val_1
LBRACK [
INTCON 4
DIV /
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 8
COMMA ,
INTCON 9
RBRACE }
COMMA ,
IDENFR var_val_2
LBRACK [
INTCON 4
DIV /
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
MULT *
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 3
MULT *
INTCON 3
COMMA ,
INTCON 5
PLUS +
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 12
DIV /
INTCON 4
COMMA ,
INTCON 1
MINU -
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR show_global
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "var_val_1[0]=%d,var_val_1[1]=%d\n"
COMMA ,
IDENFR var_val_1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR var_val_1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR size_a
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR size_b
RPARENT )
LBRACE {
INTTK int
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RBRACE }
COMMA ,
LBRACE {
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR a
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
IDENFR const_val_1
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR const_val_2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR const_val_1
LBRACK [
INTCON 1
RBRACK ]
RBRACE }
SEMICN ;
INTTK int
IDENFR p1
ASSIGN =
LPARENT (
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR c
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
MOD %
IDENFR size_a
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
IDENFR size_a
MINU -
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR p1
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR p1
RBRACK ]
PLUS +
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR i
MOD %
INTCON 2
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR p2
ASSIGN =
LPARENT (
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
MOD %
INTCON 2
COMMA ,
IDENFR p3
ASSIGN =
LPARENT (
IDENFR d
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
DIV /
INTCON 2
MOD %
IDENFR size_b
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
IDENFR size_b
MINU -
INTCON 1
COMMA ,
IDENFR k
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
GEQ >=
INTCON 0
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR k
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
LBRACK [
IDENFR p2
RBRACK ]
LBRACK [
IDENFR p3
RBRACK ]
ASSIGN =
IDENFR b
LBRACK [
IDENFR p2
RBRACK ]
LBRACK [
IDENFR p3
RBRACK ]
PLUS +
IDENFR b
LBRACK [
IDENFR j
RBRACK ]
LBRACK [
IDENFR k
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "a[%d]=%d,b[%d][%d]=%d\n"
COMMA ,
IDENFR p1
COMMA ,
IDENFR a
LBRACK [
IDENFR p1
RBRACK ]
COMMA ,
IDENFR p2
COMMA ,
IDENFR p3
COMMA ,
IDENFR b
LBRACK [
IDENFR p2
RBRACK ]
LBRACK [
IDENFR p3
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
IDENFR a
LBRACK [
IDENFR p1
RBRACK ]
PLUS +
IDENFR b
LBRACK [
IDENFR p2
RBRACK ]
LBRACK [
IDENFR p3
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR b
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
PLUS +
IDENFR var_val_1
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR j
ASSIGN =
INTCON 1
COMMA ,
IDENFR k
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
GEQ >=
INTCON 0
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR k
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR b
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR var_val_2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR show_global
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR var_val_1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
IDENFR var_val_1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR func1
LPARENT (
IDENFR a
COMMA ,
INTCON 2
COMMA ,
IDENFR b
COMMA ,
INTCON 2
RPARENT )
SEMICN ;
IDENFR var_val_1
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR var_val_1
LBRACK [
INTCON 0
RBRACK ]
MOD %
INTCON 123
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d,%d\n"
COMMA ,
IDENFR var_val_1
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR var_val_1
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373650\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
IDENFR func1
LPARENT (
IDENFR var_val_1
COMMA ,
INTCON 2
COMMA ,
IDENFR var_val_2
COMMA ,
INTCON 2
RPARENT )
COMMA ,
IDENFR func1
LPARENT (
IDENFR var_val_0
COMMA ,
INTCON 8
COMMA ,
IDENFR var_val_2
COMMA ,
INTCON 2
RPARENT )
RBRACE }
COMMA ,
LBRACE {
IDENFR func1
LPARENT (
IDENFR var_val_2
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
INTCON 2
COMMA ,
IDENFR var_val_2
COMMA ,
INTCON 2
RPARENT )
COMMA ,
IDENFR func1
LPARENT (
IDENFR var_val_2
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
INTCON 2
COMMA ,
IDENFR var_val_2
COMMA ,
INTCON 2
RPARENT )
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR b
LBRACK [
LPARENT (
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
MOD %
INTCON 2
RBRACK ]
ASSIGN =
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR func2
LPARENT (
IDENFR b
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IDENFR show_global
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "test is over\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
