VOIDTK void
IDENFR quickSort
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR left
COMMA ,
INTTK int
IDENFR right
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR left
GEQ >=
IDENFR right
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR i
ASSIGN =
IDENFR left
COMMA ,
IDENFR j
ASSIGN =
IDENFR right
COMMA ,
IDENFR base
COMMA ,
IDENFR temp
SEMICN ;
IDENFR base
ASSIGN =
IDENFR arr
LBRACK [
IDENFR left
RBRACK ]
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
WHILETK while
LPARENT (
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
GEQ >=
IDENFR base
AND &&
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
LEQ <=
IDENFR base
AND &&
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
IDENFR j
RPARENT )
LBRACE {
IDENFR temp
ASSIGN =
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR temp
SEMICN ;
RBRACE }
RBRACE }
IDENFR arr
LBRACK [
IDENFR left
RBRACK ]
ASSIGN =
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR arr
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR base
SEMICN ;
IDENFR quickSort
LPARENT (
IDENFR arr
COMMA ,
IDENFR left
COMMA ,
IDENFR i
MINU -
INTCON 1
RPARENT )
SEMICN ;
IDENFR quickSort
LPARENT (
IDENFR arr
COMMA ,
IDENFR i
PLUS +
INTCON 1
COMMA ,
IDENFR right
RPARENT )
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373611\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373611\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373611\n"
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR length
ASSIGN =
INTCON 5
SEMICN ;
CONSTTK const
INTTK int
IDENFR array_const
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR array
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Please input base number a:\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
COMMA ,
IDENFR b
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "Please input base number b:\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR array
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
IDENFR array
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR a
MINU -
IDENFR b
SEMICN ;
IDENFR array
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
IDENFR a
MULT *
IDENFR b
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR b
RPARENT )
LBRACE {
IDENFR array
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR array_const
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IDENFR array
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR array_const
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "error.\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR array
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
IDENFR a
DIV /
IDENFR b
SEMICN ;
IDENFR array
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
IDENFR a
MOD %
IDENFR b
SEMICN ;
RBRACE }
IDENFR quickSort
LPARENT (
IDENFR array
COMMA ,
INTCON 0
COMMA ,
INTCON 4
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "The No.%d number is %d.\n"
COMMA ,
IDENFR i
COMMA ,
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
