CONSTTK const
INTTK int
IDENFR cn0
ASSIGN =
INTCON 12
SEMICN ;
CONSTTK const
INTTK int
IDENFR cn1
ASSIGN =
IDENFR cn0
PLUS +
INTCON 1
COMMA ,
IDENFR cn2
ASSIGN =
IDENFR cn1
PLUS +
IDENFR cn0
COMMA ,
IDENFR cn3
ASSIGN =
INTCON 76
MULT *
INTCON 12
SEMICN ;
INTTK int
IDENFR vr0
ASSIGN =
IDENFR cn1
SEMICN ;
INTTK int
IDENFR vr1
SEMICN ;
INTTK int
IDENFR vr2
COMMA ,
IDENFR vr3
ASSIGN =
INTCON 99
COMMA ,
IDENFR vr4
SEMICN ;
INTTK int
IDENFR rand
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 180
SEMICN ;
RBRACE }
INTTK int
IDENFR addSum
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
INTTK int
IDENFR t
ASSIGN =
IDENFR x
COMMA ,
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR t
GRE >
IDENFR t
EQL ==
IDENFR t
LSS <
IDENFR t
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR t
SEMICN ;
IDENFR t
ASSIGN =
IDENFR t
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR t
EQL ==
INTCON 0
RPARENT )
BREAKTK break
SEMICN ;
RBRACE }
RETURNTK return
IDENFR sum
SEMICN ;
RBRACE }
INTTK int
IDENFR gcd
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR y
EQL ==
INTCON 0
RPARENT )
RETURNTK return
IDENFR x
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
RPARENT )
RETURNTK return
IDENFR gcd
LPARENT (
IDENFR x
COMMA ,
IDENFR x
MOD %
IDENFR y
RPARENT )
SEMICN ;
RETURNTK return
IDENFR gcd
LPARENT (
IDENFR y
COMMA ,
IDENFR y
MOD %
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fv0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR fv1
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
COMMA ,
INTTK int
IDENFR z
RPARENT )
LBRACE {
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR cn4
ASSIGN =
INTCON 23
SEMICN ;
INTTK int
IDENFR vr5
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d%d%d%d%d%d%d%d\n"
COMMA ,
INTCON 1
COMMA ,
INTCON 9
COMMA ,
INTCON 3
COMMA ,
INTCON 7
COMMA ,
INTCON 3
COMMA ,
INTCON 2
COMMA ,
INTCON 7
COMMA ,
INTCON 6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON " !()*+,-./0123456789:;<>=?@[]^_`~{}|\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "qwertyuiopasd\nfghjklzxcvbnm"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "QWERTYUIOPASD\nFGHJKLZXCVBNM"
RPARENT )
SEMICN ;
IDENFR vr5
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR vr5
ASSIGN =
IDENFR cn4
MULT *
IDENFR vr5
SEMICN ;
SEMICN ;
INTCON 1
PLUS +
INTCON 1
SEMICN ;
LBRACE {
IFTK if
LPARENT (
IDENFR cn4
GEQ >=
IDENFR cn4
NEQ !=
IDENFR cn4
LEQ <=
IDENFR cn4
RPARENT )
SEMICN ;
IDENFR fv0
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR vr5
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR vr5
ASSIGN =
IDENFR vr5
MINU -
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR vr5
MOD %
INTCON 2
EQL ==
INTCON 1
RPARENT )
CONTINUETK continue
SEMICN ;
IDENFR vr1
ASSIGN =
IDENFR vr1
PLUS +
INTCON 1
SEMICN ;
IDENFR vr5
ASSIGN =
IDENFR vr5
DIV /
INTCON 2
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
LPARENT (
INTCON 1
RPARENT )
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
IDENFR vr3
ASSIGN =
INTCON 9
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR vr5
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d\n"
COMMA ,
IDENFR gcd
LPARENT (
INTCON 72
COMMA ,
INTCON 18
RPARENT )
COMMA ,
IDENFR gcd
LPARENT (
IDENFR vr1
COMMA ,
IDENFR cn4
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "addSum: %d, %d\n"
COMMA ,
IDENFR addSum
LPARENT (
INTCON 14
RPARENT )
COMMA ,
IDENFR addSum
LPARENT (
IDENFR vr1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
PLUS +
MINU -
PLUS +
INTCON 1
MULT *
MINU -
PLUS +
MINU -
IDENFR rand
LPARENT (
RPARENT )
MULT *
LPARENT (
INTCON 12
RPARENT )
MINU -
IDENFR vr1
DIV /
INTCON 2
DIV /
INTCON 2
PLUS +
MINU -
PLUS +
MINU -
INTCON 100
MOD %
INTCON 97
MOD %
INTCON 2
MINU -
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
MULT *
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "1008%d\n"
COMMA ,
MINU -
INTCON 6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "end"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
