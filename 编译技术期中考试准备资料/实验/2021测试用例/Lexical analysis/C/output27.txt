CONSTTK const
INTTK int
IDENFR const_a
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_a0
ASSIGN =
INTCON 1
PLUS +
INTCON 3
COMMA ,
IDENFR _const_a1
ASSIGN =
INTCON 1
PLUS +
INTCON 3
MULT *
INTCON 4
DIV /
INTCON 5
MOD %
INTCON 2
SEMICN ;
INTTK int
IDENFR var_a
SEMICN ;
INTTK int
IDENFR var_a0
COMMA ,
IDENFR var_a1
SEMICN ;
INTTK int
IDENFR var_init
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR var_init0
ASSIGN =
MINU -
INTCON 2
PLUS +
MINU -
PLUS +
INTCON 5
COMMA ,
IDENFR var_init1
ASSIGN =
INTCON 4
DIV /
INTCON 2
SEMICN ;
VOIDTK void
IDENFR func_void0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func_void1
LPARENT (
INTTK int
IDENFR a1
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func_void2
LPARENT (
INTTK int
IDENFR a1
COMMA ,
INTTK int
IDENFR a2
COMMA ,
INTTK int
IDENFR a3
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR func_int0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func_int1
LPARENT (
INTTK int
IDENFR a1
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func_int2
LPARENT (
INTTK int
IDENFR a1
COMMA ,
INTTK int
IDENFR a2
RPARENT )
LBRACE {
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373315\n"
RPARENT )
SEMICN ;
IDENFR var_a
ASSIGN =
MINU -
IDENFR const_a
SEMICN ;
IDENFR var_a0
ASSIGN =
LPARENT (
IDENFR const_a
PLUS +
INTCON 1
RPARENT )
MULT *
MINU -
INTCON 5
MULT *
MINU -
INTCON 1
MOD %
INTCON 7
PLUS +
INTCON 1
MINU -
PLUS +
MINU -
INTCON 5
SEMICN ;
IDENFR var_a1
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR tmp_a
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR tmp_1
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR func_void0
LPARENT (
RPARENT )
SEMICN ;
INTCON 1
PLUS +
INTCON 1
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "this is a yu ju ky\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR var_a
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR var_a
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR var_a
ASSIGN =
IDENFR var_a
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR var_a
GEQ >=
INTCON 8
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR func_int0
LPARENT (
RPARENT )
EQL ==
INTCON 0
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR func_int1
LPARENT (
INTCON 1
RPARENT )
EQL ==
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR func_int2
LPARENT (
INTCON 1
COMMA ,
INTCON 2
RPARENT )
MINU -
INTCON 5
PLUS +
MINU -
INTCON 1
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 2
GRE >
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "unbelievable!\n"
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RBRACE }
RBRACE }
RBRACE }
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
IDENFR func_int0
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 2
MINU -
NOT !
IDENFR func_int1
LPARENT (
INTCON 1
RPARENT )
EQL ==
INTCON 2
RPARENT )
SEMICN ;
IDENFR var_a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "var_a from getint() is %d\n"
COMMA ,
IDENFR var_a
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "getint is %d\n"
COMMA ,
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "tmp\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "tmp\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "tmp\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "tmp\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "tmp\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
