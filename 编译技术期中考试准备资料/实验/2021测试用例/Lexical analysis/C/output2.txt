INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "18375200\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR _origin
COMMA ,
IDENFR _1
COMMA ,
IDENFR _2
COMMA ,
IDENFR _3
COMMA ,
IDENFR _4
COMMA ,
IDENFR _5
COMMA ,
IDENFR _6
COMMA ,
IDENFR _7
COMMA ,
IDENFR _8
COMMA ,
IDENFR _9
SEMICN ;
IDENFR _origin
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR _1
ASSIGN =
IDENFR _origin
MULT *
PLUS +
MINU -
PLUS +
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _1
RPARENT )
SEMICN ;
IDENFR _2
ASSIGN =
LPARENT (
IDENFR _1
MOD %
INTCON 10086
RPARENT )
MOD %
INTCON 2333
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _2
RPARENT )
SEMICN ;
IDENFR _3
ASSIGN =
IDENFR _2
MULT *
LPARENT (
IDENFR _1
MULT *
IDENFR _1
RPARENT )
DIV /
INTCON 326
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR _3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "ppgod7mi"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "\n%dyoga%d\n"
COMMA ,
INTCON 4396
COMMA ,
INTCON 7
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "2333\n\n\n\n"
RPARENT )
SEMICN ;
IDENFR _4
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR _5
ASSIGN =
INTCON 2
SEMICN ;
IFTK if
LPARENT (
IDENFR _4
GEQ >=
INTCON 2
RPARENT )
IDENFR _6
ASSIGN =
INTCON 1
SEMICN ;
ELSETK else
IDENFR _6
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR _5
LEQ <=
IDENFR _4
DIV /
INTCON 2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR _4
MOD %
IDENFR _5
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR _6
ASSIGN =
INTCON 0
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
IDENFR _5
ASSIGN =
IDENFR _5
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR _6
EQL ==
INTCON 0
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "%d is not a prime, with factor %d.\n"
COMMA ,
IDENFR _4
COMMA ,
IDENFR _5
RPARENT )
SEMICN ;
ELSETK else
PRINTFTK printf
LPARENT (
STRCON "%d is a prime.\n"
COMMA ,
IDENFR _4
RPARENT )
SEMICN ;
IDENFR _7
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR _8
ASSIGN =
INTCON 1
SEMICN ;
IDENFR _9
ASSIGN =
INTCON 1
SEMICN ;
IDENFR _2
ASSIGN =
INTCON 2
SEMICN ;
WHILETK while
LPARENT (
IDENFR _2
LSS <
IDENFR _7
RPARENT )
LBRACE {
IDENFR _3
ASSIGN =
LPARENT (
IDENFR _8
PLUS +
IDENFR _9
RPARENT )
MOD %
INTCON 1000007
SEMICN ;
IDENFR _8
ASSIGN =
IDENFR _9
SEMICN ;
IDENFR _9
ASSIGN =
IDENFR _3
SEMICN ;
IDENFR _2
ASSIGN =
IDENFR _2
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "The %dth Fibonacci num is %d."
COMMA ,
IDENFR _7
COMMA ,
IDENFR _9
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
