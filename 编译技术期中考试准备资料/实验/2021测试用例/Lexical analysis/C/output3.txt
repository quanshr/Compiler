CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 9
SEMICN ;
CONSTTK const
INTTK int
IDENFR b
ASSIGN =
IDENFR a
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
IDENFR a
SEMICN ;
INTTK int
IDENFR mycheck
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
RETURNTK return
INTCON 10
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 2
RPARENT )
RETURNTK return
INTCON 20
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 4
RPARENT )
RETURNTK return
INTCON 40
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 5
RPARENT )
RETURNTK return
INTCON 50
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 6
RPARENT )
RETURNTK return
INTCON 60
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 3
RPARENT )
RETURNTK return
INTCON 30
SEMICN ;
ELSETK else
RETURNTK return
INTCON 99
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testGetInt
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 9
RPARENT )
LBRACE {
INTTK int
IDENFR temp
SEMICN ;
IDENFR temp
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR in1
ASSIGN =
INTCON 89
SEMICN ;
CONSTTK const
INTTK int
IDENFR in2
ASSIGN =
IDENFR in1
SEMICN ;
INTTK int
IDENFR vin1
ASSIGN =
IDENFR in1
SEMICN ;
INTTK int
IDENFR vin2
ASSIGN =
IDENFR vin1
SEMICN ;
INTTK int
IDENFR vin3
ASSIGN =
IDENFR in2
SEMICN ;
INTTK int
IDENFR vin4
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
INTTK int
IDENFR vin5
ASSIGN =
IDENFR d
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 19231177
RPARENT )
SEMICN ;
IDENFR testGetInt
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
LSS <
INTCON 10
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR mycheck
LPARENT (
IDENFR a
RPARENT )
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR mycheck
LPARENT (
IDENFR a
RPARENT )
LSS <
IDENFR mycheck
LPARENT (
IDENFR mycheck
LPARENT (
IDENFR a
RPARENT )
DIV /
INTCON 20
RPARENT )
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "appear\n"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "not\n"
RPARENT )
SEMICN ;
RBRACE }
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR a1
ASSIGN =
INTCON 1
COMMA ,
IDENFR a2
ASSIGN =
INTCON 2
COMMA ,
IDENFR a3
ASSIGN =
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "print123\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d%d%d\n"
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "/****/%d%d%d\n"
COMMA ,
INTCON 1
COMMA ,
IDENFR a2
COMMA ,
IDENFR a3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "/**/%d%d%d\n"
COMMA ,
IDENFR a1
COMMA ,
IDENFR a2
COMMA ,
IDENFR a3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "print return value :\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR temp
ASSIGN =
INTCON 5
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in : 5 ,out = %d\n"
COMMA ,
IDENFR mycheck
LPARENT (
INTCON 5
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "in : 5 ,out = %d\n"
COMMA ,
IDENFR mycheck
LPARENT (
IDENFR temp
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
