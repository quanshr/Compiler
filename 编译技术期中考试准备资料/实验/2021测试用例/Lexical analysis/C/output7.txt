CONSTTK const
INTTK int
IDENFR const_name1
ASSIGN =
INTCON 2
PLUS +
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_name_2
ASSIGN =
INTCON 8
MINU -
LPARENT (
INTCON 7
MINU -
INTCON 2
RPARENT )
COMMA ,
IDENFR _const_name3
ASSIGN =
INTCON 0
COMMA ,
IDENFR const_name4_
ASSIGN =
INTCON 6
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_name5
LBRACK [
INTCON 2
PLUS +
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
PLUS +
INTCON 3
COMMA ,
INTCON 9
MINU -
INTCON 6
COMMA ,
INTCON 8
MINU -
LPARENT (
INTCON 7
MINU -
INTCON 2
RPARENT )
COMMA ,
LPARENT (
INTCON 2
PLUS +
INTCON 1
RPARENT )
PLUS +
INTCON 1
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_name_6
LBRACK [
INTCON 9
MINU -
INTCON 6
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 1
MULT *
LPARENT (
PLUS +
INTCON 2
RPARENT )
RBRACE }
COMMA ,
IDENFR _const_name7
LBRACK [
LPARENT (
INTCON 2
PLUS +
INTCON 1
RPARENT )
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 3
COMMA ,
INTCON 9
RBRACE }
COMMA ,
IDENFR const_name8_
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 7
COMMA ,
INTCON 6
MULT *
INTCON 9
DIV /
INTCON 6
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_name9
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 8
MINU -
LPARENT (
INTCON 7
MINU -
INTCON 2
RPARENT )
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR const_name_10
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
MINU -
INTCON 78549321
RBRACE }
RBRACE }
COMMA ,
IDENFR _const_name11
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
DIV /
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 8
COMMA ,
INTCON 0
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 9
COMMA ,
INTCON 1
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR var_name1
ASSIGN =
INTCON 9
MINU -
INTCON 6
SEMICN ;
INTTK int
IDENFR var_name_2
ASSIGN =
INTCON 7
MOD %
INTCON 4
COMMA ,
IDENFR _var_name3
COMMA ,
IDENFR var_name4_
ASSIGN =
LPARENT (
INTCON 2
PLUS +
INTCON 1
RPARENT )
PLUS +
INTCON 1
SEMICN ;
INTTK int
IDENFR var_name5
LBRACK [
INTCON 7
MOD %
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR var_name_6
LBRACK [
INTCON 7
MOD %
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LPARENT (
INTCON 2
PLUS +
INTCON 1
RPARENT )
PLUS +
INTCON 1
COMMA ,
INTCON 7
MULT *
INTCON 6
MINU -
INTCON 9
COMMA ,
INTCON 6
MINU -
INTCON 7
PLUS +
INTCON 8
MINU -
LPARENT (
INTCON 12
MOD %
INTCON 5
RPARENT )
RBRACE }
COMMA ,
IDENFR _var_name7
LBRACK [
INTCON 3
MULT *
INTCON 8
DIV /
INTCON 8
RBRACK ]
COMMA ,
IDENFR var_name8_
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR var_name9
LBRACK [
INTCON 8
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
INTTK int
IDENFR var_name_10
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
MULT *
INTCON 3
DIV /
INTCON 2
PLUS +
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 7
COMMA ,
INTCON 4
COMMA ,
INTCON 0
COMMA ,
INTCON 6
COMMA ,
INTCON 1
COMMA ,
INTCON 6
RBRACE }
RBRACE }
COMMA ,
IDENFR _var_name11
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
RBRACE }
RBRACE }
COMMA ,
IDENFR var_name12_
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
DIV /
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 8
COMMA ,
INTCON 0
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 9
COMMA ,
INTCON 1
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
VOIDTK void
IDENFR fun_name1_
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR fun1_const_1
ASSIGN =
INTCON 9
PLUS +
INTCON 19
SEMICN ;
INTTK int
IDENFR fun1_var1__
ASSIGN =
IDENFR fun1_const_1
PLUS +
IDENFR const_name5
LBRACK [
INTCON 4
MINU -
INTCON 3
RBRACK ]
MINU -
IDENFR var_name_10
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
SEMICN ;
INTTK int
IDENFR fun1_var2
COMMA ,
IDENFR fun1_var3
SEMICN ;
IDENFR fun1_var2
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR fun1_var3
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR fun1_var2
EQL ==
IDENFR fun1_var3
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "fun_name1_: two numbers are equal %d = %d\n"
COMMA ,
IDENFR fun1_var2
COMMA ,
IDENFR fun1_var3
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR fun1_var2
GRE >
IDENFR fun1_var3
RPARENT )
LBRACE {
IDENFR fun1_var1__
ASSIGN =
IDENFR fun1_var2
MINU -
IDENFR fun1_var3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fun_name1_:  fun1_var2 > fun1_var3 %d > %d, %d-%d = %d\n"
COMMA ,
IDENFR fun1_var2
COMMA ,
IDENFR fun1_var3
COMMA ,
IDENFR fun1_var2
COMMA ,
IDENFR fun1_var3
COMMA ,
IDENFR fun1_var1__
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR fun1_var2
LSS <
IDENFR fun1_var3
RPARENT )
LBRACE {
IDENFR fun1_var1__
ASSIGN =
IDENFR fun1_var3
MINU -
IDENFR fun1_var2
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "fun_name1_:  fun1_var2 < fun1_var3 %d < %d, %d-%d = %d\n"
COMMA ,
IDENFR fun1_var2
COMMA ,
IDENFR fun1_var3
COMMA ,
IDENFR fun1_var3
COMMA ,
IDENFR fun1_var2
COMMA ,
IDENFR fun1_var1__
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_name2
LPARENT (
INTTK int
IDENFR fun2_para1
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR fun2_para2
RPARENT )
LBRACE {
INTTK int
IDENFR fun2_ans
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR fun2_para2
GRE >
INTCON 0
AND &&
NOT !
INTCON 0
RPARENT )
LBRACE {
IDENFR fun2_ans
ASSIGN =
IDENFR fun2_ans
PLUS +
IDENFR fun2_para1
LBRACK [
IDENFR fun2_para2
MINU -
INTCON 1
RBRACK ]
SEMICN ;
IDENFR fun2_para2
ASSIGN =
IDENFR fun2_para2
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR fun2_ans
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_name3
LPARENT (
INTTK int
IDENFR fun3_para1
LBRACK [
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
INTTK int
IDENFR fun3_para2
RPARENT )
LBRACE {
INTTK int
IDENFR fun3_ans
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR fun3_para2
GRE >
INTCON 0
OR ||
NOT !
INTCON 1
RPARENT )
LBRACE {
IDENFR fun3_ans
ASSIGN =
IDENFR fun3_ans
PLUS +
IDENFR fun_name2
LPARENT (
IDENFR fun3_para1
LBRACK [
IDENFR fun3_para2
MINU -
INTCON 1
RBRACK ]
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR fun3_para2
ASSIGN =
IDENFR fun3_para2
MINU -
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
IDENFR fun3_ans
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_name4
LPARENT (
INTTK int
IDENFR fun4_para
RPARENT )
LBRACE {
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR const_name1
NEQ !=
IDENFR var_name1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR fun4_para
LEQ <=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR fun_name5
LPARENT (
INTTK int
IDENFR fun5_para1
COMMA ,
INTTK int
IDENFR fun5_para2
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR fun5_const
ASSIGN =
INTCON 16
SEMICN ;
INTTK int
IDENFR fun5_var
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR fun5_para2
GEQ >=
INTCON 1
RPARENT )
LBRACE {
IDENFR fun5_para2
ASSIGN =
IDENFR fun5_para2
MINU -
INTCON 1
SEMICN ;
IDENFR fun5_var
ASSIGN =
IDENFR fun5_var
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR fun5_var
EQL ==
INTCON 16
RPARENT )
BREAKTK break
SEMICN ;
ELSETK else
LBRACE {
IDENFR ans
ASSIGN =
IDENFR ans
MULT *
IDENFR fun5_para1
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "fun_name5: went to an inaccessible place\n"
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373576\n"
RPARENT )
SEMICN ;
IDENFR fun_name1_
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "main: sum of var_name12_ : %d\n"
COMMA ,
IDENFR fun_name3
LPARENT (
IDENFR var_name12_
COMMA ,
INTCON 2
RPARENT )
RPARENT )
SEMICN ;
IDENFR fun_name4
LPARENT (
IDENFR var_name1
RPARENT )
SEMICN ;
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 2
COMMA ,
IDENFR b
ASSIGN =
INTCON 3
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "main: %d^%d(%d<=16) = %d\n"
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR b
COMMA ,
IDENFR fun_name5
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d %d %d %d %d %d %d %d\n"
COMMA ,
IDENFR const_name1
COMMA ,
IDENFR const_name_2
COMMA ,
IDENFR _const_name3
COMMA ,
IDENFR const_name4_
COMMA ,
IDENFR const_name5
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR const_name_6
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR _const_name7
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR const_name8_
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR const_name9
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR const_name_10
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR _const_name11
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d %d %d %d %d %d %d %d %d %d %d %d"
COMMA ,
IDENFR var_name1
COMMA ,
IDENFR var_name_2
COMMA ,
IDENFR _var_name3
COMMA ,
IDENFR var_name4_
COMMA ,
IDENFR var_name5
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR var_name_6
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR _var_name7
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR var_name8_
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR var_name9
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR var_name_10
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
COMMA ,
IDENFR _var_name11
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR var_name12_
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
