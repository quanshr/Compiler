CONSTTK const
INTTK int
IDENFR normalConst1
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR normalConst2
ASSIGN =
INTCON 12
COMMA ,
IDENFR normalConst3
ASSIGN =
INTCON 13
COMMA ,
IDENFR normalConst4
ASSIGN =
INTCON 14
SEMICN ;
INTTK int
IDENFR normalVar1
ASSIGN =
INTCON 21
SEMICN ;
INTTK int
IDENFR normalVar2
ASSIGN =
INTCON 22
COMMA ,
IDENFR normalVar3
ASSIGN =
INTCON 23
SEMICN ;
INTTK int
IDENFR cnt
SEMICN ;
VOIDTK void
IDENFR output
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "the num is %d\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR judgeEvenOdd
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d is even!\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d is odd!\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR get2Max
LPARENT (
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR m
GRE >
IDENFR n
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "max of %d and %d is %d\n"
COMMA ,
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR m
LEQ <=
IDENFR n
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "max of %d and %d is %d\n"
COMMA ,
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR get2Min
LPARENT (
INTTK int
IDENFR m
COMMA ,
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR ans
ASSIGN =
IDENFR m
SEMICN ;
IFTK if
LPARENT (
IDENFR m
GRE >
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "min of %d and %d is %d\n"
COMMA ,
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR n
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR m
LSS <
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "min of %d and %d is %d\n"
COMMA ,
IDENFR m
COMMA ,
IDENFR n
COMMA ,
IDENFR m
RPARENT )
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR m
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR m
EQL ==
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d and %d are equals\n"
COMMA ,
IDENFR m
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR n
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
VOIDTK void
IDENFR start
LPARENT (
RPARENT )
LBRACE {
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "19373341\n"
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR isPrime
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 3
SEMICN ;
IFTK if
LPARENT (
IDENFR n
MOD %
INTCON 2
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "No, %d is not a prime! It has a factor 2\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR flag
RPARENT )
LBRACE {
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR n
MOD %
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "No, %d is not a prime! It has a factor %d\n"
COMMA ,
IDENFR n
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 2
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR flag
EQL ==
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "Yes, %d is a prime!\n"
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IDENFR cnt
ASSIGN =
IDENFR cnt
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
WHILETK while
LPARENT (
INTCON 1
RPARENT )
LBRACE {
IDENFR start
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 13
COMMA ,
IDENFR j
ASSIGN =
INTCON 212
SEMICN ;
CONSTTK const
INTTK int
IDENFR ii
ASSIGN =
INTCON 21
SEMICN ;
INTTK int
IDENFR k
ASSIGN =
INTCON 1
COMMA ,
IDENFR kk
ASSIGN =
INTCON 2
SEMICN ;
INTTK int
IDENFR nnnnn
ASSIGN =
INTCON 22
SEMICN ;
INTTK int
IDENFR nnn
SEMICN ;
IDENFR nnn
ASSIGN =
INTCON 123
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
INTTK int
IDENFR m
SEMICN ;
IDENFR m
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR n
SEMICN ;
IDENFR n
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR mm
SEMICN ;
IDENFR mm
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR output
LPARENT (
IDENFR j
DIV /
IDENFR i
PLUS +
INTCON 4
MULT *
IDENFR j
MINU -
IDENFR i
RPARENT )
SEMICN ;
IDENFR output
LPARENT (
IDENFR m
RPARENT )
SEMICN ;
IDENFR output
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
IDENFR output
LPARENT (
IDENFR mm
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR judgeEvenOdd
LPARENT (
IDENFR m
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
GEQ >=
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR judgeEvenOdd
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR get2Max
LPARENT (
IDENFR m
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR get2Min
LPARENT (
IDENFR m
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR isPrime
LPARENT (
IDENFR mm
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR cnt
EQL ==
INTCON 10
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
